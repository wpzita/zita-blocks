{"version":3,"file":"editor.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/blocks/block-assets/font-family.js","webpack:///./src/blocks/block-assets/icons.js","webpack:///./src/blocks/icon-block/editor.scss","webpack:///./src/blocks/icon-block/index.js","webpack:///./src/blocks/pricing-table/editor.scss","webpack:///./src/blocks/pricing-table/index.js","webpack:///./src/blocks/pricing-table/parent.js","webpack:///./src/blocks/progress-bar-pie/editor.scss","webpack:///./src/blocks/progress-bar-pie/index.js","webpack:///./src/blocks/progress-bar/editor.scss","webpack:///./src/blocks/progress-bar/index.js","webpack:///./src/blocks/service-section/editor.scss","webpack:///./src/blocks/service-section/index.js","webpack:///./src/blocks/service-section/parent.js","webpack:///./src/blocks/zita-block-slider/edit.js","webpack:///./src/blocks/zita-block-slider/editor.scss","webpack:///./src/blocks/zita-block-slider/index.js","webpack:///./src/editor.js","webpack:///external [\"wp\",\"blockEditor\"]","webpack:///external [\"wp\",\"blocks\"]","webpack:///external [\"wp\",\"components\"]","webpack:///external [\"wp\",\"element\"]","webpack:///external [\"wp\",\"i18n\"]"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/editor.js\");\n","const fontFmily = \n[\"ABeeZee\",\n\"Abel\",\n\"Aclonica\",\n\"Acme\",\n\"Aguafina Script\",\n\"Akronim\",\n\"Aladin\",\n\"Alegreya SC\",\n\"Alex Brush\",\n\"Allura\",\n\"Almendra\",\n\"Almendra Display\",\n\"Amatic SC\",\n\"Amita\",\n\"Arizonia\",\n\"Arimo\",\n\"Arvo\",\n\"Asap Condensed\",\n\"Bad Script\",\n\"Balsamiq Sans\",\n\"Barrio\",\n\"Berkshire Swash\",\n\"Bubblegum Sans\",\n\"Bungee Hairline\",\n\"Butcherman\",\n\"Catamaran\",\n\"Dancing Script\",\n\"Do Hyeon\",\n\"Dokdo\",\n\"Dosis\",\n\"Dr Sugiyama\",\n\"Eater\",\n\"Ewert\",\n\"Fascinate Inline\",\n\"Faster One\",\n\"Finger Paint\",\n\"Gorditas\",\n\"Great Vibes\",\n\"Habibi\",\n\"Hanuman\",\n\"Hanalei\",\n\"IM Fell Great Primer SC\",\n\"Iceberg\",\n\"Iceland\",\n\"Indie Flower\",\n\"Inter\",\n\"Irish Grover\",\n\"Italianno\",\n\"Itim\",\n\"Jacques Francois\",\n\"Jacques Francois Shadow\",\n\"Jim Nightshade\",\n\"Joti One\",\n\"Julius Sans One\",\n\"Just Me Again Down Here\",\n\"Kaushan Script\",\n\"Keania One\",\n\"Kirang Haerang\",\n\"Kite One\",\n\"Kristi\",\n\"Kumar One Outline\",\n\"Lakki Reddy\",\n\"Leckerli One\",\n\"Lily Script One\",\n\"Liu Jian Mao Cao\",\n\"Londrina Shadow\",\n\"Love Ya Like A Sister\",\n\"Major Mono Display\",\n\"Mandali\",\n\"Marck Script\",\n\"Merienda\",\n\"Merienda One\",\n\"Merriweather Sans\",\n\"Michroma\",\n\"Miltonian Tattoo\",\n\"Mountains of Christmas\",\n\"Mukta Vaani\",\n\"Niramit\",\n\"Nosifer\",\n\"Nova Script\",\n\"Norican\",\n\"Offside\",\n\"Orbitron\",\n\"PT Sans Caption\",\n\"Pacifico\",\n\"Palanquin Dark\",\n\"Piedra\",\n\"Playfair Display\",\n\"Poiret One\",\n\"Princess Sofia\",\n\"Zilla Slab\",\n\"Zhi Mang Xing\",\n\"Zeyada\",\n\"ZCOOL XiaoWei\",\n\"ZCOOL KuaiLe\",\n\"Yeon Sung\",\n\"Yellowtail\",\n\"Yatra One\",\n\"Yanone Kaffeesatz\",\n\"Yesteryear\",\n\"Wire One\",\n\"Wendy One\",\n\"Wellfleet\",\n\"Warnes\",\n\"Walter Turncoat\",\n\"Wallpoet\",\n\"Waiting for the Sunrise\",\n\"Volkhov\",\n\"Viga\",\n\"Vibur\",\n\"Vibes\",\n\"Vast Shadow\",\n\"Vampiro One\",\n\"VT323\",\n\"Unlock\",\n\"Unkempt\",\n\"UnifrakturMaguntia\",\n\"Unica One\",\n\"Underdog\",\n\"Uncial Antiqua\",\n\"Ultra\",\n\"Ubuntu\",\n\"Ubuntu Mono\",\n\"Turret Road\",\n\"Turret Road\",\n\"Tulpen One\",\n\"Trochut\",\n\"Trocchi\",\n\"Trade Winds\",\n\"Tomorrow\",\n\"Titan One\",\n\"Timmana\",\n\"Tillana\",\n\"The Girl Next Door\",\n\"Text Me One\",\n\"Tenali Ramakrishna\",\n\"Tauri\",\n\"Tangerine\",\n\"Syncopate\",\n\"Swanky and Moo Moo\",\n\"Suravaram\",\n\"Supermercado One\",\n\"Sunshiney\",\n\"Sulphur Point\",\n\"Sue Ellen Francisco\",\n\"Stylish\",\n\"Stint Ultra Expanded\",\n\"Stardos Stencil\",\n\"Stalinist One\",\n\"Stalemate\",\n\"Srisakdi\",\n\"Sriracha\",\n\"Spirax\",\n\"Spicy Rice\",\n\"Special Elite\",\n\"Space Mono\",\n\"Source Code Pro\",\n\"Sonsie One\",\n\"Sofia\",\n\"Sofadi One\",\n\"Snowburst One\",\n\"Snippet\",\n\"Sniglet\",\n\"Smokum\",\n\"Slackey\",\n\"Skranji\",\n\"Six Caps\",\n\"Sirin Stencil\",\n\"Simonetta\",\n\"Sigmar One\",\n\"Shrikhand\",\n\"Short Stack\",\n\"Shojumaru\",\n\"Shadows Into Light Two\",\n\"Shadows Into Light\",\n\"Seymour One\",\n\"Sevillana\",\n\"Sedgwick Ave Display\",\n\"Sedgwick Ave\",\n\"Seaweed Script\",\n\"Satisfy\",\n\"Sarina\",\n\"Sancreek\",\n\"Saira Stencil One\",\n\"Sail\",\n\"Sacramento\",\n\"Rye\",\n\"Ruthie\",\n\"Ruslan Display\",\n\"Rum Raisin\",\n\"Ruge Boogie\",\n\"Rubik Mono One\",\n\"Rouge Script\",\n\"Rosarivo\",\n\"Romanesco\",\n\"Rock Salt\",\n\"Rochester\",\n\"Roboto\",\n\"Risque\",\n\"Ribeye Marrow\",\n\"Ribeye\",\n\"Revalia\",\n\"Reenie Beanie\",\n\"Redressed\",\n\"Red Rose\",\n\"Ravi Prakash\",\n\"Ranga\",\n\"Rancho\",\n\"Ranchers\",\n\"Raleway Dots\",\n\"Rakkas\",\n\"Rajdhani\",\n\"Racing Sans One\",\n\"Quintessential\",\n\"Qwigley\",\n\"Quicksand\"];\nexport default fontFmily;\n","let icons_ = [\n    \"fas fa-ad\",\n    \"fas fa-address-book\",\n    \"fas fa-address-card\",\n    \"fas fa-adjust\",\n    \"fas fa-air-freshener\",\n    \"fas fa-align-center\",\n    \"fas fa-align-justify\",\n    \"fas fa-align-left\",\n    \"fas fa-align-right\",\n    \"fas fa-allergies\",\n    \"fas fa-ambulance\",\n    \"fas fa-american-sign-language-interpreting\",\n    \"fas fa-anchor\",\n    \"fas fa-angle-double-down\",\n    \"fas fa-angle-double-left\",\n    \"fas fa-angle-double-right\",\n    \"fas fa-angle-double-up\",\n    \"fas fa-angle-down\",\n    \"fas fa-angle-left\",\n    \"fas fa-angle-right\",\n    \"fas fa-angle-up\",\n    \"fas fa-angry\",\n    \"fas fa-ankh\",\n    \"fas fa-apple-alt\",\n    \"fas fa-archive\",\n    \"fas fa-archway\",\n    \"fas fa-arrow-alt-circle-down\",\n    \"fas fa-arrow-alt-circle-left\",\n    \"fas fa-arrow-alt-circle-right\",\n    \"fas fa-arrow-alt-circle-up\",\n    \"fas fa-arrow-circle-down\",\n    \"fas fa-arrow-circle-left\",\n    \"fas fa-arrow-circle-right\",\n    \"fas fa-arrow-circle-up\",\n    \"fas fa-arrow-down\",\n    \"fas fa-arrow-left\",\n    \"fas fa-arrow-right\",\n    \"fas fa-arrow-up\",\n    \"fas fa-arrows-alt\",\n    \"fas fa-arrows-alt-h\",\n    \"fas fa-arrows-alt-v\",\n    \"fas fa-assistive-listening-systems\",\n    \"fas fa-asterisk\",\n    \"fas fa-at\",\n    \"fas fa-atlas\",\n    \"fas fa-atom\",\n    \"fas fa-audio-description\",\n    \"fas fa-award\",\n    \"fas fa-baby\",\n    \"fas fa-baby-carriage\",\n    \"fas fa-backspace\",\n    \"fas fa-backward\",\n    \"fas fa-balance-scale\",\n    \"fas fa-ban\",\n    \"fas fa-band-aid\",\n    \"fas fa-barcode\",\n    \"fas fa-bars\",\n    \"fas fa-baseball-ball\",\n    \"fas fa-basketball-ball\",\n    \"fas fa-bath\",\n    \"fas fa-battery-empty\",\n    \"fas fa-battery-full\",\n    \"fas fa-battery-half\",\n    \"fas fa-battery-quarter\",\n    \"fas fa-battery-three-quarters\",\n    \"fas fa-bed\",\n    \"fas fa-beer\",\n    \"fas fa-bell\",\n    \"fas fa-bell-slash\",\n    \"fas fa-bezier-curve\",\n    \"fas fa-bible\",\n    \"fas fa-bicycle\",\n    \"fas fa-binoculars\",\n    \"fas fa-biohazard\",\n    \"fas fa-birthday-cake\",\n    \"fas fa-blender\",\n    \"fas fa-blender-phone\",\n    \"fas fa-blind\",\n    \"fas fa-blog\",\n    \"fas fa-bold\",\n    \"fas fa-bolt\",\n    \"fas fa-bomb\",\n    \"fas fa-bone\",\n    \"fas fa-bong\",\n    \"fas fa-book\",\n    \"fas fa-book-dead\",\n    \"fas fa-book-open\",\n    \"fas fa-book-reader\",\n    \"fas fa-bookmark\",\n    \"fas fa-bowling-ball\",\n    \"fas fa-box\",\n    \"fas fa-box-open\",\n    \"fas fa-boxes\",\n    \"fas fa-braille\",\n    \"fas fa-brain\",\n    \"fas fa-briefcase\",\n    \"fas fa-briefcase-medical\",\n    \"fas fa-broadcast-tower\",\n    \"fas fa-broom\",\n    \"fas fa-brush\",\n    \"fas fa-bug\",\n    \"fas fa-building\",\n    \"fas fa-bullhorn\",\n    \"fas fa-bullseye\",\n    \"fas fa-burn\",\n    \"fas fa-bus\",\n    \"fas fa-bus-alt\",\n    \"fas fa-business-time\",\n    \"fas fa-calculator\",\n    \"fas fa-calendar\",\n    \"fas fa-calendar-alt\",\n    \"fas fa-calendar-check\",\n    \"fas fa-calendar-day\",\n    \"fas fa-calendar-minus\",\n    \"fas fa-calendar-plus\",\n    \"fas fa-calendar-times\",\n    \"fas fa-calendar-week\",\n    \"fas fa-camera\",\n    \"fas fa-camera-retro\",\n    \"fas fa-campground\",\n    \"fas fa-candy-cane\",\n    \"fas fa-cannabis\",\n    \"fas fa-capsules\",\n    \"fas fa-car\",\n    \"fas fa-car-alt\",\n    \"fas fa-car-battery\",\n    \"fas fa-car-crash\",\n    \"fas fa-car-side\",\n    \"fas fa-caret-down\",\n    \"fas fa-caret-left\",\n    \"fas fa-caret-right\",\n    \"fas fa-caret-square-down\",\n    \"fas fa-caret-square-left\",\n    \"fas fa-caret-square-right\",\n    \"fas fa-caret-square-up\",\n    \"fas fa-caret-up\",\n    \"fas fa-carrot\",\n    \"fas fa-cart-arrow-down\",\n    \"fas fa-cart-plus\",\n    \"fas fa-cash-register\",\n    \"fas fa-cat\",\n    \"fas fa-certificate\",\n    \"fas fa-chair\",\n    \"fas fa-chalkboard\",\n    \"fas fa-chalkboard-teacher\",\n    \"fas fa-charging-station\",\n    \"fas fa-chart-area\",\n    \"fas fa-chart-bar\",\n    \"fas fa-chart-line\",\n    \"fas fa-chart-pie\",\n    \"fas fa-check\",\n    \"fas fa-check-circle\",\n    \"fas fa-check-double\",\n    \"fas fa-check-square\",\n    \"fas fa-chess\",\n    \"fas fa-chess-bishop\",\n    \"fas fa-chess-board\",\n    \"fas fa-chess-king\",\n    \"fas fa-chess-knight\",\n    \"fas fa-chess-pawn\",\n    \"fas fa-chess-queen\",\n    \"fas fa-chess-rook\",\n    \"fas fa-chevron-circle-down\",\n    \"fas fa-chevron-circle-left\",\n    \"fas fa-chevron-circle-right\",\n    \"fas fa-chevron-circle-up\",\n    \"fas fa-chevron-down\",\n    \"fas fa-chevron-left\",\n    \"fas fa-chevron-right\",\n    \"fas fa-chevron-up\",\n    \"fas fa-child\",\n    \"fas fa-church\",\n    \"fas fa-circle\",\n    \"fas fa-circle-notch\",\n    \"fas fa-city\",\n    \"fas fa-clipboard\",\n    \"fas fa-clipboard-check\",\n    \"fas fa-clipboard-list\",\n    \"fas fa-clock\",\n    \"fas fa-clone\",\n    \"fas fa-closed-captioning\",\n    \"fas fa-cloud\",\n    \"fas fa-cloud-download-alt\",\n    \"fas fa-cloud-meatball\",\n    \"fas fa-cloud-moon\",\n    \"fas fa-cloud-moon-rain\",\n    \"fas fa-cloud-rain\",\n    \"fas fa-cloud-showers-heavy\",\n    \"fas fa-cloud-sun\",\n    \"fas fa-cloud-sun-rain\",\n    \"fas fa-cloud-upload-alt\",\n    \"fas fa-cocktail\",\n    \"fas fa-code\",\n    \"fas fa-code-branch\",\n    \"fas fa-coffee\",\n    \"fas fa-cog\",\n    \"fas fa-cogs\",\n    \"fas fa-coins\",\n    \"fas fa-columns\",\n    \"fas fa-comment\",\n    \"fas fa-comment-alt\",\n    \"fas fa-comment-dollar\",\n    \"fas fa-comment-dots\",\n    \"fas fa-comment-slash\",\n    \"fas fa-comments\",\n    \"fas fa-comments-dollar\",\n    \"fas fa-compact-disc\",\n    \"fas fa-compass\",\n    \"fas fa-compress\",\n    \"fas fa-compress-arrows-alt\",\n    \"fas fa-concierge-bell\",\n    \"fas fa-cookie\",\n    \"fas fa-cookie-bite\",\n    \"fas fa-copy\",\n    \"fas fa-copyright\",\n    \"fas fa-couch\",\n    \"fas fa-credit-card\",\n    \"fas fa-crop\",\n    \"fas fa-crop-alt\",\n    \"fas fa-cross\",\n    \"fas fa-crosshairs\",\n    \"fas fa-crow\",\n    \"fas fa-crown\",\n    \"fas fa-cube\",\n    \"fas fa-cubes\",\n    \"fas fa-cut\",\n    \"fas fa-database\",\n    \"fas fa-deaf\",\n    \"fas fa-democrat\",\n    \"fas fa-desktop\",\n    \"fas fa-dharmachakra\",\n    \"fas fa-diagnoses\",\n    \"fas fa-dice\",\n    \"fas fa-dice-d20\",\n    \"fas fa-dice-d6\",\n    \"fas fa-dice-five\",\n    \"fas fa-dice-four\",\n    \"fas fa-dice-one\",\n    \"fas fa-dice-six\",\n    \"fas fa-dice-three\",\n    \"fas fa-dice-two\",\n    \"fas fa-digital-tachograph\",\n    \"fas fa-directions\",\n    \"fas fa-divide\",\n    \"fas fa-dizzy\",\n    \"fas fa-dna\",\n    \"fas fa-dog\",\n    \"fas fa-dollar-sign\",\n    \"fas fa-dolly\",\n    \"fas fa-dolly-flatbed\",\n    \"fas fa-donate\",\n    \"fas fa-door-closed\",\n    \"fas fa-door-open\",\n    \"fas fa-dot-circle\",\n    \"fas fa-dove\",\n    \"fas fa-download\",\n    \"fas fa-drafting-compass\",\n    \"fas fa-dragon\",\n    \"fas fa-draw-polygon\",\n    \"fas fa-drum\",\n    \"fas fa-drum-steelpan\",\n    \"fas fa-drumstick-bite\",\n    \"fas fa-dumbbell\",\n    \"fas fa-dumpster\",\n    \"fas fa-dumpster-fire\",\n    \"fas fa-dungeon\",\n    \"fas fa-edit\",\n    \"fas fa-eject\",\n    \"fas fa-ellipsis-h\",\n    \"fas fa-ellipsis-v\",\n    \"fas fa-envelope\",\n    \"fas fa-envelope-open\",\n    \"fas fa-envelope-open-text\",\n    \"fas fa-envelope-square\",\n    \"fas fa-equals\",\n    \"fas fa-eraser\",\n    \"fas fa-ethernet\",\n    \"fas fa-euro-sign\",\n    \"fas fa-exchange-alt\",\n    \"fas fa-exclamation\",\n    \"fas fa-exclamation-circle\",\n    \"fas fa-exclamation-triangle\",\n    \"fas fa-expand\",\n    \"fas fa-expand-arrows-alt\",\n    \"fas fa-external-link-alt\",\n    \"fas fa-external-link-square-alt\",\n    \"fas fa-eye\",\n    \"fas fa-eye-dropper\",\n    \"fas fa-eye-slash\",\n    \"fas fa-fast-backward\",\n    \"fas fa-fast-forward\",\n    \"fas fa-fax\",\n    \"fas fa-feather\",\n    \"fas fa-feather-alt\",\n    \"fas fa-female\",\n    \"fas fa-fighter-jet\",\n    \"fas fa-file\",\n    \"fas fa-file-alt\",\n    \"fas fa-file-archive\",\n    \"fas fa-file-audio\",\n    \"fas fa-file-code\",\n    \"fas fa-file-contract\",\n    \"fas fa-file-csv\",\n    \"fas fa-file-download\",\n    \"fas fa-file-excel\",\n    \"fas fa-file-export\",\n    \"fas fa-file-image\",\n    \"fas fa-file-import\",\n    \"fas fa-file-invoice\",\n    \"fas fa-file-invoice-dollar\",\n    \"fas fa-file-medical\",\n    \"fas fa-file-medical-alt\",\n    \"fas fa-file-pdf\",\n    \"fas fa-file-powerpoint\",\n    \"fas fa-file-prescription\",\n    \"fas fa-file-signature\",\n    \"fas fa-file-upload\",\n    \"fas fa-file-video\",\n    \"fas fa-file-word\",\n    \"fas fa-fill\",\n    \"fas fa-fill-drip\",\n    \"fas fa-film\",\n    \"fas fa-filter\",\n    \"fas fa-fingerprint\",\n    \"fas fa-fire\",\n    \"fas fa-fire-alt\",\n    \"fas fa-fire-extinguisher\",\n    \"fas fa-first-aid\",\n    \"fas fa-fish\",\n    \"fas fa-fist-raised\",\n    \"fas fa-flag\",\n    \"fas fa-flag-checkered\",\n    \"fas fa-flag-usa\",\n    \"fas fa-flask\",\n    \"fas fa-flushed\",\n    \"fas fa-folder\",\n    \"fas fa-folder-minus\",\n    \"fas fa-folder-open\",\n    \"fas fa-folder-plus\",\n    \"fas fa-font\",\n    \"fas fa-football-ball\",\n    \"fas fa-forward\",\n    \"fas fa-frog\",\n    \"fas fa-frown\",\n    \"fas fa-frown-open\",\n    \"fas fa-funnel-dollar\",\n    \"fas fa-futbol\",\n    \"fas fa-gamepad\",\n    \"fas fa-gas-pump\",\n    \"fas fa-gavel\",\n    \"fas fa-gem\",\n    \"fas fa-genderless\",\n    \"fas fa-ghost\",\n    \"fas fa-gift\",\n    \"fas fa-gifts\",\n    \"fas fa-glass-cheers\",\n    \"fas fa-glass-martini\",\n    \"fas fa-glass-martini-alt\",\n    \"fas fa-glass-whiskey\",\n    \"fas fa-glasses\",\n    \"fas fa-globe\",\n    \"fas fa-globe-africa\",\n    \"fas fa-globe-americas\",\n    \"fas fa-globe-asia\",\n    \"fas fa-globe-europe\",\n    \"fas fa-golf-ball\",\n    \"fas fa-gopuram\",\n    \"fas fa-graduation-cap\",\n    \"fas fa-greater-than\",\n    \"fas fa-greater-than-equal\",\n    \"fas fa-grimace\",\n    \"fas fa-grin\",\n    \"fas fa-grin-alt\",\n    \"fas fa-grin-beam\",\n    \"fas fa-grin-beam-sweat\",\n    \"fas fa-grin-hearts\",\n    \"fas fa-grin-squint\",\n    \"fas fa-grin-squint-tears\",\n    \"fas fa-grin-stars\",\n    \"fas fa-grin-tears\",\n    \"fas fa-grin-tongue\",\n    \"fas fa-grin-tongue-squint\",\n    \"fas fa-grin-tongue-wink\",\n    \"fas fa-grin-wink\",\n    \"fas fa-grip-horizontal\",\n    \"fas fa-grip-lines\",\n    \"fas fa-grip-lines-vertical\",\n    \"fas fa-grip-vertical\",\n    \"fas fa-guitar\",\n    \"fas fa-h-square\",\n    \"fas fa-hammer\",\n    \"fas fa-hamsa\",\n    \"fas fa-hand-holding\",\n    \"fas fa-hand-holding-heart\",\n    \"fas fa-hand-holding-usd\",\n    \"fas fa-hand-lizard\",\n    \"fas fa-hand-paper\",\n    \"fas fa-hand-peace\",\n    \"fas fa-hand-point-down\",\n    \"fas fa-hand-point-left\",\n    \"fas fa-hand-point-right\",\n    \"fas fa-hand-point-up\",\n    \"fas fa-hand-pointer\",\n    \"fas fa-hand-rock\",\n    \"fas fa-hand-scissors\",\n    \"fas fa-hand-spock\",\n    \"fas fa-hands\",\n    \"fas fa-hands-helping\",\n    \"fas fa-handshake\",\n    \"fas fa-hanukiah\",\n    \"fas fa-hashtag\",\n    \"fas fa-hat-wizard\",\n    \"fas fa-haykal\",\n    \"fas fa-hdd\",\n    \"fas fa-heading\",\n    \"fas fa-headphones\",\n    \"fas fa-headphones-alt\",\n    \"fas fa-headset\",\n    \"fas fa-heart\",\n    \"fas fa-heart-broken\",\n    \"fas fa-heartbeat\",\n    \"fas fa-helicopter\",\n    \"fas fa-highlighter\",\n    \"fas fa-hiking\",\n    \"fas fa-hippo\",\n    \"fas fa-history\",\n    \"fas fa-hockey-puck\",\n    \"fas fa-holly-berry\",\n    \"fas fa-home\",\n    \"fas fa-horse\",\n    \"fas fa-horse-head\",\n    \"fas fa-hospital\",\n    \"fas fa-hospital-alt\",\n    \"fas fa-hospital-symbol\",\n    \"fas fa-hot-tub\",\n    \"fas fa-hotel\",\n    \"fas fa-hourglass\",\n    \"fas fa-hourglass-end\",\n    \"fas fa-hourglass-half\",\n    \"fas fa-hourglass-start\",\n    \"fas fa-house-damage\",\n    \"fas fa-hryvnia\",\n    \"fas fa-i-cursor\",\n    \"fas fa-icicles\",\n    \"fas fa-id-badge\",\n    \"fas fa-id-card\",\n    \"fas fa-id-card-alt\",\n    \"fas fa-igloo\",\n    \"fas fa-image\",\n    \"fas fa-images\",\n    \"fas fa-inbox\",\n    \"fas fa-indent\",\n    \"fas fa-industry\",\n    \"fas fa-infinity\",\n    \"fas fa-info\",\n    \"fas fa-info-circle\",\n    \"fas fa-italic\",\n    \"fas fa-jedi\",\n    \"fas fa-joint\",\n    \"fas fa-journal-whills\",\n    \"fas fa-kaaba\",\n    \"fas fa-key\",\n    \"fas fa-keyboard\",\n    \"fas fa-khanda\",\n    \"fas fa-kiss\",\n    \"fas fa-kiss-beam\",\n    \"fas fa-kiss-wink-heart\",\n    \"fas fa-kiwi-bird\",\n    \"fas fa-landmark\",\n    \"fas fa-language\",\n    \"fas fa-laptop\",\n    \"fas fa-laptop-code\",\n    \"fas fa-laugh\",\n    \"fas fa-laugh-beam\",\n    \"fas fa-laugh-squint\",\n    \"fas fa-laugh-wink\",\n    \"fas fa-layer-group\",\n    \"fas fa-leaf\",\n    \"fas fa-lemon\",\n    \"fas fa-less-than\",\n    \"fas fa-less-than-equal\",\n    \"fas fa-level-down-alt\",\n    \"fas fa-level-up-alt\",\n    \"fas fa-life-ring\",\n    \"fas fa-lightbulb\",\n    \"fas fa-link\",\n    \"fas fa-lira-sign\",\n    \"fas fa-list\",\n    \"fas fa-list-alt\",\n    \"fas fa-list-ol\",\n    \"fas fa-list-ul\",\n    \"fas fa-location-arrow\",\n    \"fas fa-lock\",\n    \"fas fa-lock-open\",\n    \"fas fa-long-arrow-alt-down\",\n    \"fas fa-long-arrow-alt-left\",\n    \"fas fa-long-arrow-alt-right\",\n    \"fas fa-long-arrow-alt-up\",\n    \"fas fa-low-vision\",\n    \"fas fa-luggage-cart\",\n    \"fas fa-magic\",\n    \"fas fa-magnet\",\n    \"fas fa-mail-bulk\",\n    \"fas fa-male\",\n    \"fas fa-map\",\n    \"fas fa-map-marked\",\n    \"fas fa-map-marked-alt\",\n    \"fas fa-map-marker\",\n    \"fas fa-map-marker-alt\",\n    \"fas fa-map-pin\",\n    \"fas fa-map-signs\",\n    \"fas fa-marker\",\n    \"fas fa-mars\",\n    \"fas fa-mars-double\",\n    \"fas fa-mars-stroke\",\n    \"fas fa-mars-stroke-h\",\n    \"fas fa-mars-stroke-v\",\n    \"fas fa-mask\",\n    \"fas fa-medal\",\n    \"fas fa-medkit\",\n    \"fas fa-meh\",\n    \"fas fa-meh-blank\",\n    \"fas fa-meh-rolling-eyes\",\n    \"fas fa-memory\",\n    \"fas fa-menorah\",\n    \"fas fa-mercury\",\n    \"fas fa-meteor\",\n    \"fas fa-microchip\",\n    \"fas fa-microphone\",\n    \"fas fa-microphone-alt\",\n    \"fas fa-microphone-alt-slash\",\n    \"fas fa-microphone-slash\",\n    \"fas fa-microscope\",\n    \"fas fa-minus\",\n    \"fas fa-minus-circle\",\n    \"fas fa-minus-square\",\n    \"fas fa-mitten\",\n    \"fas fa-mobile\",\n    \"fas fa-mobile-alt\",\n    \"fas fa-money-bill\",\n    \"fas fa-money-bill-alt\",\n    \"fas fa-money-bill-wave\",\n    \"fas fa-money-bill-wave-alt\",\n    \"fas fa-money-check\",\n    \"fas fa-money-check-alt\",\n    \"fas fa-monument\",\n    \"fas fa-moon\",\n    \"fas fa-mortar-pestle\",\n    \"fas fa-mosque\",\n    \"fas fa-motorcycle\",\n    \"fas fa-mountain\",\n    \"fas fa-mouse-pointer\",\n    \"fas fa-mug-hot\",\n    \"fas fa-music\",\n    \"fas fa-network-wired\",\n    \"fas fa-neuter\",\n    \"fas fa-newspaper\",\n    \"fas fa-not-equal\",\n    \"fas fa-notes-medical\",\n    \"fas fa-object-group\",\n    \"fas fa-object-ungroup\",\n    \"fas fa-oil-can\",\n    \"fas fa-om\",\n    \"fas fa-otter\",\n    \"fas fa-outdent\",\n    \"fas fa-paint-brush\",\n    \"fas fa-paint-roller\",\n    \"fas fa-palette\",\n    \"fas fa-pallet\",\n    \"fas fa-paper-plane\",\n    \"fas fa-paperclip\",\n    \"fas fa-parachute-box\",\n    \"fas fa-paragraph\",\n    \"fas fa-parking\",\n    \"fas fa-passport\",\n    \"fas fa-pastafarianism\",\n    \"fas fa-paste\",\n    \"fas fa-pause\",\n    \"fas fa-pause-circle\",\n    \"fas fa-paw\",\n    \"fas fa-peace\",\n    \"fas fa-pen\",\n    \"fas fa-pen-alt\",\n    \"fas fa-pen-fancy\",\n    \"fas fa-pen-nib\",\n    \"fas fa-pen-square\",\n    \"fas fa-pencil-alt\",\n    \"fas fa-pencil-ruler\",\n    \"fas fa-people-carry\",\n    \"fas fa-percent\",\n    \"fas fa-percentage\",\n    \"fas fa-person-booth\",\n    \"fas fa-phone\",\n    \"fas fa-phone-slash\",\n    \"fas fa-phone-square\",\n    \"fas fa-phone-volume\",\n    \"fas fa-piggy-bank\",\n    \"fas fa-pills\",\n    \"fas fa-place-of-worship\",\n    \"fas fa-plane\",\n    \"fas fa-plane-arrival\",\n    \"fas fa-plane-departure\",\n    \"fas fa-play\",\n    \"fas fa-play-circle\",\n    \"fas fa-plug\",\n    \"fas fa-plus\",\n    \"fas fa-plus-circle\",\n    \"fas fa-plus-square\",\n    \"fas fa-podcast\",\n    \"fas fa-poll\",\n    \"fas fa-poll-h\",\n    \"fas fa-poo\",\n    \"fas fa-poo-storm\",\n    \"fas fa-poop\",\n    \"fas fa-portrait\",\n    \"fas fa-pound-sign\",\n    \"fas fa-power-off\",\n    \"fas fa-pray\",\n    \"fas fa-praying-hands\",\n    \"fas fa-prescription\",\n    \"fas fa-prescription-bottle\",\n    \"fas fa-prescription-bottle-alt\",\n    \"fas fa-print\",\n    \"fas fa-procedures\",\n    \"fas fa-project-diagram\",\n    \"fas fa-puzzle-piece\",\n    \"fas fa-qrcode\",\n    \"fas fa-question\",\n    \"fas fa-question-circle\",\n    \"fas fa-quidditch\",\n    \"fas fa-quote-left\",\n    \"fas fa-quote-right\",\n    \"fas fa-quran\",\n    \"fas fa-radiation\",\n    \"fas fa-radiation-alt\",\n    \"fas fa-rainbow\",\n    \"fas fa-random\",\n    \"fas fa-receipt\",\n    \"fas fa-recycle\",\n    \"fas fa-redo\",\n    \"fas fa-redo-alt\",\n    \"fas fa-registered\",\n    \"fas fa-reply\",\n    \"fas fa-reply-all\",\n    \"fas fa-republican\",\n    \"fas fa-restroom\",\n    \"fas fa-retweet\",\n    \"fas fa-ribbon\",\n    \"fas fa-ring\",\n    \"fas fa-road\",\n    \"fas fa-robot\",\n    \"fas fa-rocket\",\n    \"fas fa-route\",\n    \"fas fa-rss\",\n    \"fas fa-rss-square\",\n    \"fas fa-ruble-sign\",\n    \"fas fa-ruler\",\n    \"fas fa-ruler-combined\",\n    \"fas fa-ruler-horizontal\",\n    \"fas fa-ruler-vertical\",\n    \"fas fa-running\",\n    \"fas fa-rupee-sign\",\n    \"fas fa-sad-cry\",\n    \"fas fa-sad-tear\",\n    \"fas fa-satellite\",\n    \"fas fa-satellite-dish\",\n    \"fas fa-save\",\n    \"fas fa-school\",\n    \"fas fa-screwdriver\",\n    \"fas fa-scroll\",\n    \"fas fa-sd-card\",\n    \"fas fa-search\",\n    \"fas fa-search-dollar\",\n    \"fas fa-search-location\",\n    \"fas fa-search-minus\",\n    \"fas fa-search-plus\",\n    \"fas fa-seedling\",\n    \"fas fa-server\",\n    \"fas fa-shapes\",\n    \"fas fa-share\",\n    \"fas fa-share-alt\",\n    \"fas fa-share-alt-square\",\n    \"fas fa-share-square\",\n    \"fas fa-shekel-sign\",\n    \"fas fa-shield-alt\",\n    \"fas fa-ship\",\n    \"fas fa-shipping-fast\",\n    \"fas fa-shoe-prints\",\n    \"fas fa-shopping-bag\",\n    \"fas fa-shopping-basket\",\n    \"fas fa-shopping-cart\",\n    \"fas fa-shower\",\n    \"fas fa-shuttle-van\",\n    \"fas fa-sign\",\n    \"fas fa-sign-in-alt\",\n    \"fas fa-sign-language\",\n    \"fas fa-sign-out-alt\",\n    \"fas fa-signal\",\n    \"fas fa-signature\",\n    \"fas fa-sim-card\",\n    \"fas fa-sitemap\",\n    \"fas fa-skating\",\n    \"fas fa-skiing\",\n    \"fas fa-skiing-nordic\",\n    \"fas fa-skull\",\n    \"fas fa-skull-crossbones\",\n    \"fas fa-slash\",\n    \"fas fa-sleigh\",\n    \"fas fa-sliders-h\",\n    \"fas fa-smile\",\n    \"fas fa-smile-beam\",\n    \"fas fa-smile-wink\",\n    \"fas fa-smog\",\n    \"fas fa-smoking\",\n    \"fas fa-smoking-ban\",\n    \"fas fa-sms\",\n    \"fas fa-snowboarding\",\n    \"fas fa-snowflake\",\n    \"fas fa-snowman\",\n    \"fas fa-snowplow\",\n    \"fas fa-socks\",\n    \"fas fa-solar-panel\",\n    \"fas fa-sort\",\n    \"fas fa-sort-alpha-down\",\n    \"fas fa-sort-alpha-up\",\n    \"fas fa-sort-amount-down\",\n    \"fas fa-sort-amount-up\",\n    \"fas fa-sort-down\",\n    \"fas fa-sort-numeric-down\",\n    \"fas fa-sort-numeric-up\",\n    \"fas fa-sort-up\",\n    \"fas fa-spa\",\n    \"fas fa-space-shuttle\",\n    \"fas fa-spider\",\n    \"fas fa-spinner\",\n    \"fas fa-splotch\",\n    \"fas fa-spray-can\",\n    \"fas fa-square\",\n    \"fas fa-square-full\",\n    \"fas fa-square-root-alt\",\n    \"fas fa-stamp\",\n    \"fas fa-star\",\n    \"fas fa-star-and-crescent\",\n    \"fas fa-star-half\",\n    \"fas fa-star-half-alt\",\n    \"fas fa-star-of-david\",\n    \"fas fa-star-of-life\",\n    \"fas fa-step-backward\",\n    \"fas fa-step-forward\",\n    \"fas fa-stethoscope\",\n    \"fas fa-sticky-note\",\n    \"fas fa-stop\",\n    \"fas fa-stop-circle\",\n    \"fas fa-stopwatch\",\n    \"fas fa-store\",\n    \"fas fa-store-alt\",\n    \"fas fa-stream\",\n    \"fas fa-street-view\",\n    \"fas fa-strikethrough\",\n    \"fas fa-stroopwafel\",\n    \"fas fa-subscript\",\n    \"fas fa-subway\",\n    \"fas fa-suitcase\",\n    \"fas fa-suitcase-rolling\",\n    \"fas fa-sun\",\n    \"fas fa-superscript\",\n    \"fas fa-surprise\",\n    \"fas fa-swatchbook\",\n    \"fas fa-swimmer\",\n    \"fas fa-swimming-pool\",\n    \"fas fa-synagogue\",\n    \"fas fa-sync\",\n    \"fas fa-sync-alt\",\n    \"fas fa-syringe\",\n    \"fas fa-table\",\n    \"fas fa-table-tennis\",\n    \"fas fa-tablet\",\n    \"fas fa-tablet-alt\",\n    \"fas fa-tablets\",\n    \"fas fa-tachometer-alt\",\n    \"fas fa-tag\",\n    \"fas fa-tags\",\n    \"fas fa-tape\",\n    \"fas fa-tasks\",\n    \"fas fa-taxi\",\n    \"fas fa-teeth\",\n    \"fas fa-teeth-open\",\n    \"fas fa-temperature-high\",\n    \"fas fa-temperature-low\",\n    \"fas fa-tenge\",\n    \"fas fa-terminal\",\n    \"fas fa-text-height\",\n    \"fas fa-text-width\",\n    \"fas fa-th\",\n    \"fas fa-th-large\",\n    \"fas fa-th-list\",\n    \"fas fa-theater-masks\",\n    \"fas fa-thermometer\",\n    \"fas fa-thermometer-empty\",\n    \"fas fa-thermometer-full\",\n    \"fas fa-thermometer-half\",\n    \"fas fa-thermometer-quarter\",\n    \"fas fa-thermometer-three-quarters\",\n    \"fas fa-thumbs-down\",\n    \"fas fa-thumbs-up\",\n    \"fas fa-thumbtack\",\n    \"fas fa-ticket-alt\",\n    \"fas fa-times\",\n    \"fas fa-times-circle\",\n    \"fas fa-tint\",\n    \"fas fa-tint-slash\",\n    \"fas fa-tired\",\n    \"fas fa-toggle-off\",\n    \"fas fa-toggle-on\",\n    \"fas fa-toilet\",\n    \"fas fa-toilet-paper\",\n    \"fas fa-toolbox\",\n    \"fas fa-tools\",\n    \"fas fa-tooth\",\n    \"fas fa-torah\",\n    \"fas fa-torii-gate\",\n    \"fas fa-tractor\",\n    \"fas fa-trademark\",\n    \"fas fa-traffic-light\",\n    \"fas fa-train\",\n    \"fas fa-tram\",\n    \"fas fa-transgender\",\n    \"fas fa-transgender-alt\",\n    \"fas fa-trash\",\n    \"fas fa-trash-alt\",\n    \"fas fa-tree\",\n    \"fas fa-trophy\",\n    \"fas fa-truck\",\n    \"fas fa-truck-loading\",\n    \"fas fa-truck-monster\",\n    \"fas fa-truck-moving\",\n    \"fas fa-truck-pickup\",\n    \"fas fa-tshirt\",\n    \"fas fa-tty\",\n    \"fas fa-tv\",\n    \"fas fa-umbrella\",\n    \"fas fa-umbrella-beach\",\n    \"fas fa-underline\",\n    \"fas fa-undo\",\n    \"fas fa-undo-alt\",\n    \"fas fa-universal-access\",\n    \"fas fa-university\",\n    \"fas fa-unlink\",\n    \"fas fa-unlock\",\n    \"fas fa-unlock-alt\",\n    \"fas fa-upload\",\n    \"fas fa-user\",\n    \"fas fa-user-alt\",\n    \"fas fa-user-alt-slash\",\n    \"fas fa-user-astronaut\",\n    \"fas fa-user-check\",\n    \"fas fa-user-circle\",\n    \"fas fa-user-clock\",\n    \"fas fa-user-cog\",\n    \"fas fa-user-edit\",\n    \"fas fa-user-friends\",\n    \"fas fa-user-graduate\",\n    \"fas fa-user-injured\",\n    \"fas fa-user-lock\",\n    \"fas fa-user-md\",\n    \"fas fa-user-minus\",\n    \"fas fa-user-ninja\",\n    \"fas fa-user-plus\",\n    \"fas fa-user-secret\",\n    \"fas fa-user-shield\",\n    \"fas fa-user-slash\",\n    \"fas fa-user-tag\",\n    \"fas fa-user-tie\",\n    \"fas fa-user-times\",\n    \"fas fa-users\",\n    \"fas fa-users-cog\",\n    \"fas fa-utensil-spoon\",\n    \"fas fa-utensils\",\n    \"fas fa-vector-square\",\n    \"fas fa-venus\",\n    \"fas fa-venus-double\",\n    \"fas fa-venus-mars\",\n    \"fas fa-vial\",\n    \"fas fa-vials\",\n    \"fas fa-video\",\n    \"fas fa-video-slash\",\n    \"fas fa-vihara\",\n    \"fas fa-volleyball-ball\",\n    \"fas fa-volume-down\",\n    \"fas fa-volume-mute\",\n    \"fas fa-volume-off\",\n    \"fas fa-volume-up\",\n    \"fas fa-vote-yea\",\n    \"fas fa-vr-cardboard\",\n    \"fas fa-walking\",\n    \"fas fa-wallet\",\n    \"fas fa-warehouse\",\n    \"fas fa-water\",\n    \"fas fa-weight\",\n    \"fas fa-weight-hanging\",\n    \"fas fa-wheelchair\",\n    \"fas fa-wifi\",\n    \"fas fa-wind\",\n    \"fas fa-window-close\",\n    \"fas fa-window-maximize\",\n    \"fas fa-window-minimize\",\n    \"fas fa-window-restore\",\n    \"fas fa-wine-bottle\",\n    \"fas fa-wine-glass\",\n    \"fas fa-wine-glass-alt\",\n    \"fas fa-won-sign\",\n    \"fas fa-wrench\",\n    \"fas fa-x-ray\",\n    \"fas fa-yen-sign\",\n    \"fas fa-yin-yang\",\n    \"far fa-address-book\",\n    \"far fa-address-card\",\n    \"far fa-angry\",\n    \"far fa-arrow-alt-circle-down\",\n    \"far fa-arrow-alt-circle-left\",\n    \"far fa-arrow-alt-circle-right\",\n    \"far fa-arrow-alt-circle-up\",\n    \"far fa-bell\",\n    \"far fa-bell-slash\",\n    \"far fa-bookmark\",\n    \"far fa-building\",\n    \"far fa-calendar\",\n    \"far fa-calendar-alt\",\n    \"far fa-calendar-check\",\n    \"far fa-calendar-minus\",\n    \"far fa-calendar-plus\",\n    \"far fa-calendar-times\",\n    \"far fa-caret-square-down\",\n    \"far fa-caret-square-left\",\n    \"far fa-caret-square-right\",\n    \"far fa-caret-square-up\",\n    \"far fa-chart-bar\",\n    \"far fa-check-circle\",\n    \"far fa-check-square\",\n    \"far fa-circle\",\n    \"far fa-clipboard\",\n    \"far fa-clock\",\n    \"far fa-clone\",\n    \"far fa-closed-captioning\",\n    \"far fa-comment\",\n    \"far fa-comment-alt\",\n    \"far fa-comment-dots\",\n    \"far fa-comments\",\n    \"far fa-compass\",\n    \"far fa-copy\",\n    \"far fa-copyright\",\n    \"far fa-credit-card\",\n    \"far fa-dizzy\",\n    \"far fa-dot-circle\",\n    \"far fa-edit\",\n    \"far fa-envelope\",\n    \"far fa-envelope-open\",\n    \"far fa-eye\",\n    \"far fa-eye-slash\",\n    \"far fa-file\",\n    \"far fa-file-alt\",\n    \"far fa-file-archive\",\n    \"far fa-file-audio\",\n    \"far fa-file-code\",\n    \"far fa-file-excel\",\n    \"far fa-file-image\",\n    \"far fa-file-pdf\",\n    \"far fa-file-powerpoint\",\n    \"far fa-file-video\",\n    \"far fa-file-word\",\n    \"far fa-flag\",\n    \"far fa-flushed\",\n    \"far fa-folder\",\n    \"far fa-folder-open\",\n    \"far fa-frown\",\n    \"far fa-frown-open\",\n    \"far fa-futbol\",\n    \"far fa-gem\",\n    \"far fa-grimace\",\n    \"far fa-grin\",\n    \"far fa-grin-alt\",\n    \"far fa-grin-beam\",\n    \"far fa-grin-beam-sweat\",\n    \"far fa-grin-hearts\",\n    \"far fa-grin-squint\",\n    \"far fa-grin-squint-tears\",\n    \"far fa-grin-stars\",\n    \"far fa-grin-tears\",\n    \"far fa-grin-tongue\",\n    \"far fa-grin-tongue-squint\",\n    \"far fa-grin-tongue-wink\",\n    \"far fa-grin-wink\",\n    \"far fa-hand-lizard\",\n    \"far fa-hand-paper\",\n    \"far fa-hand-peace\",\n    \"far fa-hand-point-down\",\n    \"far fa-hand-point-left\",\n    \"far fa-hand-point-right\",\n    \"far fa-hand-point-up\",\n    \"far fa-hand-pointer\",\n    \"far fa-hand-rock\",\n    \"far fa-hand-scissors\",\n    \"far fa-hand-spock\",\n    \"far fa-handshake\",\n    \"far fa-hdd\",\n    \"far fa-heart\",\n    \"far fa-hospital\",\n    \"far fa-hourglass\",\n    \"far fa-id-badge\",\n    \"far fa-id-card\",\n    \"far fa-image\",\n    \"far fa-images\",\n    \"far fa-keyboard\",\n    \"far fa-kiss\",\n    \"far fa-kiss-beam\",\n    \"far fa-kiss-wink-heart\",\n    \"far fa-laugh\",\n    \"far fa-laugh-beam\",\n    \"far fa-laugh-squint\",\n    \"far fa-laugh-wink\",\n    \"far fa-lemon\",\n    \"far fa-life-ring\",\n    \"far fa-lightbulb\",\n    \"far fa-list-alt\",\n    \"far fa-map\",\n    \"far fa-meh\",\n    \"far fa-meh-blank\",\n    \"far fa-meh-rolling-eyes\",\n    \"far fa-minus-square\",\n    \"far fa-money-bill-alt\",\n    \"far fa-moon\",\n    \"far fa-newspaper\",\n    \"far fa-object-group\",\n    \"far fa-object-ungroup\",\n    \"far fa-paper-plane\",\n    \"far fa-pause-circle\",\n    \"far fa-play-circle\",\n    \"far fa-plus-square\",\n    \"far fa-question-circle\",\n    \"far fa-registered\",\n    \"far fa-sad-cry\",\n    \"far fa-sad-tear\",\n    \"far fa-save\",\n    \"far fa-share-square\",\n    \"far fa-smile\",\n    \"far fa-smile-beam\",\n    \"far fa-smile-wink\",\n    \"far fa-snowflake\",\n    \"far fa-square\",\n    \"far fa-star\",\n    \"far fa-star-half\",\n    \"far fa-sticky-note\",\n    \"far fa-stop-circle\",\n    \"far fa-sun\",\n    \"far fa-surprise\",\n    \"far fa-thumbs-down\",\n    \"far fa-thumbs-up\",\n    \"far fa-times-circle\",\n    \"far fa-tired\",\n    \"far fa-trash-alt\",\n    \"far fa-user\",\n    \"far fa-user-circle\",\n    \"far fa-window-close\",\n    \"far fa-window-maximize\",\n    \"far fa-window-minimize\",\n    \"far fa-window-restore\",\n    \"fab fa-500px\",\n    \"fab fa-accessible-icon\",\n    \"fab fa-accusoft\",\n    \"fab fa-acquisitions-incorporated\",\n    \"fab fa-adn\",\n    \"fab fa-adobe\",\n    \"fab fa-adversal\",\n    \"fab fa-affiliatetheme\",\n    \"fab fa-algolia\",\n    \"fab fa-alipay\",\n    \"fab fa-amazon\",\n    \"fab fa-amazon-pay\",\n    \"fab fa-amilia\",\n    \"fab fa-android\",\n    \"fab fa-angellist\",\n    \"fab fa-angrycreative\",\n    \"fab fa-angular\",\n    \"fab fa-app-store\",\n    \"fab fa-app-store-ios\",\n    \"fab fa-apper\",\n    \"fab fa-apple\",\n    \"fab fa-apple-pay\",\n    \"fab fa-artstation\",\n    \"fab fa-asymmetrik\",\n    \"fab fa-atlassian\",\n    \"fab fa-audible\",\n    \"fab fa-autoprefixer\",\n    \"fab fa-avianex\",\n    \"fab fa-aviato\",\n    \"fab fa-aws\",\n    \"fab fa-bandcamp\",\n    \"fab fa-behance\",\n    \"fab fa-behance-square\",\n    \"fab fa-bimobject\",\n    \"fab fa-bitbucket\",\n    \"fab fa-bitcoin\",\n    \"fab fa-bity\",\n    \"fab fa-black-tie\",\n    \"fab fa-blackberry\",\n    \"fab fa-blogger\",\n    \"fab fa-blogger-b\",\n    \"fab fa-bluetooth\",\n    \"fab fa-bluetooth-b\",\n    \"fab fa-btc\",\n    \"fab fa-buromobelexperte\",\n    \"fab fa-buysellads\",\n    \"fab fa-canadian-maple-leaf\",\n    \"fab fa-cc-amazon-pay\",\n    \"fab fa-cc-amex\",\n    \"fab fa-cc-apple-pay\",\n    \"fab fa-cc-diners-club\",\n    \"fab fa-cc-discover\",\n    \"fab fa-cc-jcb\",\n    \"fab fa-cc-mastercard\",\n    \"fab fa-cc-paypal\",\n    \"fab fa-cc-stripe\",\n    \"fab fa-cc-visa\",\n    \"fab fa-centercode\",\n    \"fab fa-centos\",\n    \"fab fa-chrome\",\n    \"fab fa-cloudscale\",\n    \"fab fa-cloudsmith\",\n    \"fab fa-cloudversify\",\n    \"fab fa-codepen\",\n    \"fab fa-codiepie\",\n    \"fab fa-confluence\",\n    \"fab fa-connectdevelop\",\n    \"fab fa-contao\",\n    \"fab fa-cpanel\",\n    \"fab fa-creative-commons\",\n    \"fab fa-creative-commons-by\",\n    \"fab fa-creative-commons-nc\",\n    \"fab fa-creative-commons-nc-eu\",\n    \"fab fa-creative-commons-nc-jp\",\n    \"fab fa-creative-commons-nd\",\n    \"fab fa-creative-commons-pd\",\n    \"fab fa-creative-commons-pd-alt\",\n    \"fab fa-creative-commons-remix\",\n    \"fab fa-creative-commons-sa\",\n    \"fab fa-creative-commons-sampling\",\n    \"fab fa-creative-commons-sampling-plus\",\n    \"fab fa-creative-commons-share\",\n    \"fab fa-creative-commons-zero\",\n    \"fab fa-critical-role\",\n    \"fab fa-css3\",\n    \"fab fa-css3-alt\",\n    \"fab fa-cuttlefish\",\n    \"fab fa-d-and-d\",\n    \"fab fa-d-and-d-beyond\",\n    \"fab fa-dashcube\",\n    \"fab fa-delicious\",\n    \"fab fa-deploydog\",\n    \"fab fa-deskpro\",\n    \"fab fa-dev\",\n    \"fab fa-deviantart\",\n    \"fab fa-dhl\",\n    \"fab fa-diaspora\",\n    \"fab fa-digg\",\n    \"fab fa-digital-ocean\",\n    \"fab fa-discord\",\n    \"fab fa-discourse\",\n    \"fab fa-dochub\",\n    \"fab fa-docker\",\n    \"fab fa-draft2digital\",\n    \"fab fa-dribbble\",\n    \"fab fa-dribbble-square\",\n    \"fab fa-dropbox\",\n    \"fab fa-drupal\",\n    \"fab fa-dyalog\",\n    \"fab fa-earlybirds\",\n    \"fab fa-ebay\",\n    \"fab fa-edge\",\n    \"fab fa-elementor\",\n    \"fab fa-ello\",\n    \"fab fa-ember\",\n    \"fab fa-empire\",\n    \"fab fa-envira\",\n    \"fab fa-erlang\",\n    \"fab fa-ethereum\",\n    \"fab fa-etsy\",\n    \"fab fa-expeditedssl\",\n    \"fab fa-facebook\",\n    \"fab fa-facebook-f\",\n    \"fab fa-facebook-messenger\",\n    \"fab fa-facebook-square\",\n    \"fab fa-fantasy-flight-games\",\n    \"fab fa-fedex\",\n    \"fab fa-fedora\",\n    \"fab fa-figma\",\n    \"fab fa-firefox\",\n    \"fab fa-first-order\",\n    \"fab fa-first-order-alt\",\n    \"fab fa-firstdraft\",\n    \"fab fa-flickr\",\n    \"fab fa-flipboard\",\n    \"fab fa-fly\",\n    \"fab fa-font-awesome\",\n    \"fab fa-font-awesome-alt\",\n    \"fab fa-font-awesome-flag\",\n    \"fab fa-fonticons\",\n    \"fab fa-fonticons-fi\",\n    \"fab fa-fort-awesome\",\n    \"fab fa-fort-awesome-alt\",\n    \"fab fa-forumbee\",\n    \"fab fa-foursquare\",\n    \"fab fa-free-code-camp\",\n    \"fab fa-freebsd\",\n    \"fab fa-fulcrum\",\n    \"fab fa-galactic-republic\",\n    \"fab fa-galactic-senate\",\n    \"fab fa-get-pocket\",\n    \"fab fa-gg\",\n    \"fab fa-gg-circle\",\n    \"fab fa-git\",\n    \"fab fa-git-square\",\n    \"fab fa-github\",\n    \"fab fa-github-alt\",\n    \"fab fa-github-square\",\n    \"fab fa-gitkraken\",\n    \"fab fa-gitlab\",\n    \"fab fa-gitter\",\n    \"fab fa-glide\",\n    \"fab fa-glide-g\",\n    \"fab fa-gofore\",\n    \"fab fa-goodreads\",\n    \"fab fa-goodreads-g\",\n    \"fab fa-google\",\n    \"fab fa-google-drive\",\n    \"fab fa-google-play\",\n    \"fab fa-google-plus\",\n    \"fab fa-google-plus-g\",\n    \"fab fa-google-plus-square\",\n    \"fab fa-google-wallet\",\n    \"fab fa-gratipay\",\n    \"fab fa-grav\",\n    \"fab fa-gripfire\",\n    \"fab fa-grunt\",\n    \"fab fa-gulp\",\n    \"fab fa-hacker-news\",\n    \"fab fa-hacker-news-square\",\n    \"fab fa-hackerrank\",\n    \"fab fa-hips\",\n    \"fab fa-hire-a-helper\",\n    \"fab fa-hooli\",\n    \"fab fa-hornbill\",\n    \"fab fa-hotjar\",\n    \"fab fa-houzz\",\n    \"fab fa-html5\",\n    \"fab fa-hubspot\",\n    \"fab fa-imdb\",\n    \"fab fa-instagram\",\n    \"fab fa-intercom\",\n    \"fab fa-internet-explorer\",\n    \"fab fa-invision\",\n    \"fab fa-ioxhost\",\n    \"fab fa-itunes\",\n    \"fab fa-itunes-note\",\n    \"fab fa-java\",\n    \"fab fa-jedi-order\",\n    \"fab fa-jenkins\",\n    \"fab fa-jira\",\n    \"fab fa-joget\",\n    \"fab fa-joomla\",\n    \"fab fa-js\",\n    \"fab fa-js-square\",\n    \"fab fa-jsfiddle\",\n    \"fab fa-kaggle\",\n    \"fab fa-keybase\",\n    \"fab fa-keycdn\",\n    \"fab fa-kickstarter\",\n    \"fab fa-kickstarter-k\",\n    \"fab fa-korvue\",\n    \"fab fa-laravel\",\n    \"fab fa-lastfm\",\n    \"fab fa-lastfm-square\",\n    \"fab fa-leanpub\",\n    \"fab fa-less\",\n    \"fab fa-line\",\n    \"fab fa-linkedin\",\n    \"fab fa-linkedin-in\",\n    \"fab fa-linode\",\n    \"fab fa-linux\",\n    \"fab fa-lyft\",\n    \"fab fa-magento\",\n    \"fab fa-mailchimp\",\n    \"fab fa-mandalorian\",\n    \"fab fa-markdown\",\n    \"fab fa-mastodon\",\n    \"fab fa-maxcdn\",\n    \"fab fa-medapps\",\n    \"fab fa-medium\",\n    \"fab fa-medium-m\",\n    \"fab fa-medrt\",\n    \"fab fa-meetup\",\n    \"fab fa-megaport\",\n    \"fab fa-mendeley\",\n    \"fab fa-microsoft\",\n    \"fab fa-mix\",\n    \"fab fa-mixcloud\",\n    \"fab fa-mizuni\",\n    \"fab fa-modx\",\n    \"fab fa-monero\",\n    \"fab fa-napster\",\n    \"fab fa-neos\",\n    \"fab fa-nimblr\",\n    \"fab fa-nintendo-switch\",\n    \"fab fa-node\",\n    \"fab fa-node-js\",\n    \"fab fa-npm\",\n    \"fab fa-ns8\",\n    \"fab fa-nutritionix\",\n    \"fab fa-odnoklassniki\",\n    \"fab fa-odnoklassniki-square\",\n    \"fab fa-old-republic\",\n    \"fab fa-opencart\",\n    \"fab fa-openid\",\n    \"fab fa-opera\",\n    \"fab fa-optin-monster\",\n    \"fab fa-osi\",\n    \"fab fa-page4\",\n    \"fab fa-pagelines\",\n    \"fab fa-palfed\",\n    \"fab fa-patreon\",\n    \"fab fa-paypal\",\n    \"fab fa-penny-arcade\",\n    \"fab fa-periscope\",\n    \"fab fa-phabricator\",\n    \"fab fa-phoenix-framework\",\n    \"fab fa-phoenix-squadron\",\n    \"fab fa-php\",\n    \"fab fa-pied-piper\",\n    \"fab fa-pied-piper-alt\",\n    \"fab fa-pied-piper-hat\",\n    \"fab fa-pied-piper-pp\",\n    \"fab fa-pinterest\",\n    \"fab fa-pinterest-p\",\n    \"fab fa-pinterest-square\",\n    \"fab fa-playstation\",\n    \"fab fa-product-hunt\",\n    \"fab fa-pushed\",\n    \"fab fa-python\",\n    \"fab fa-qq\",\n    \"fab fa-quinscape\",\n    \"fab fa-quora\",\n    \"fab fa-r-project\",\n    \"fab fa-raspberry-pi\",\n    \"fab fa-ravelry\",\n    \"fab fa-react\",\n    \"fab fa-reacteurope\",\n    \"fab fa-readme\",\n    \"fab fa-rebel\",\n    \"fab fa-red-river\",\n    \"fab fa-reddit\",\n    \"fab fa-reddit-alien\",\n    \"fab fa-reddit-square\",\n    \"fab fa-redhat\",\n    \"fab fa-renren\",\n    \"fab fa-replyd\",\n    \"fab fa-researchgate\",\n    \"fab fa-resolving\",\n    \"fab fa-rev\",\n    \"fab fa-rocketchat\",\n    \"fab fa-rockrms\",\n    \"fab fa-safari\",\n    \"fab fa-sass\",\n    \"fab fa-schlix\",\n    \"fab fa-scribd\",\n    \"fab fa-searchengin\",\n    \"fab fa-sellcast\",\n    \"fab fa-sellsy\",\n    \"fab fa-servicestack\",\n    \"fab fa-shirtsinbulk\",\n    \"fab fa-shopware\",\n    \"fab fa-simplybuilt\",\n    \"fab fa-sistrix\",\n    \"fab fa-sith\",\n    \"fab fa-sketch\",\n    \"fab fa-skyatlas\",\n    \"fab fa-skype\",\n    \"fab fa-slack\",\n    \"fab fa-slack-hash\",\n    \"fab fa-slideshare\",\n    \"fab fa-snapchat\",\n    \"fab fa-snapchat-ghost\",\n    \"fab fa-snapchat-square\",\n    \"fab fa-soundcloud\",\n    \"fab fa-sourcetree\",\n    \"fab fa-speakap\",\n    \"fab fa-spotify\",\n    \"fab fa-squarespace\",\n    \"fab fa-stack-exchange\",\n    \"fab fa-stack-overflow\",\n    \"fab fa-staylinked\",\n    \"fab fa-steam\",\n    \"fab fa-steam-square\",\n    \"fab fa-steam-symbol\",\n    \"fab fa-sticker-mule\",\n    \"fab fa-strava\",\n    \"fab fa-stripe\",\n    \"fab fa-stripe-s\",\n    \"fab fa-studiovinari\",\n    \"fab fa-stumbleupon\",\n    \"fab fa-stumbleupon-circle\",\n    \"fab fa-superpowers\",\n    \"fab fa-supple\",\n    \"fab fa-suse\",\n    \"fab fa-teamspeak\",\n    \"fab fa-telegram\",\n    \"fab fa-telegram-plane\",\n    \"fab fa-tencent-weibo\",\n    \"fab fa-the-red-yeti\",\n    \"fab fa-themeco\",\n    \"fab fa-themeisle\",\n    \"fab fa-think-peaks\",\n    \"fab fa-trade-federation\",\n    \"fab fa-trello\",\n    \"fab fa-tripadvisor\",\n    \"fab fa-tumblr\",\n    \"fab fa-tumblr-square\",\n    \"fab fa-twitch\",\n    \"fab fa-twitter\",\n    \"fab fa-twitter-square\",\n    \"fab fa-typo3\",\n    \"fab fa-uber\",\n    \"fab fa-ubuntu\",\n    \"fab fa-uikit\",\n    \"fab fa-uniregistry\",\n    \"fab fa-untappd\",\n    \"fab fa-ups\",\n    \"fab fa-usb\",\n    \"fab fa-usps\",\n    \"fab fa-ussunnah\",\n    \"fab fa-vaadin\",\n    \"fab fa-viacoin\",\n    \"fab fa-viadeo\",\n    \"fab fa-viadeo-square\",\n    \"fab fa-viber\",\n    \"fab fa-vimeo\",\n    \"fab fa-vimeo-square\",\n    \"fab fa-vimeo-v\",\n    \"fab fa-vine\",\n    \"fab fa-vk\",\n    \"fab fa-vnv\",\n    \"fab fa-vuejs\",\n    \"fab fa-weebly\",\n    \"fab fa-weibo\",\n    \"fab fa-weixin\",\n    \"fab fa-whatsapp\",\n    \"fab fa-whatsapp-square\",\n    \"fab fa-whmcs\",\n    \"fab fa-wikipedia-w\",\n    \"fab fa-windows\",\n    \"fab fa-wix\",\n    \"fab fa-wizards-of-the-coast\",\n    \"fab fa-wolf-pack-battalion\",\n    \"fab fa-wordpress\",\n    \"fab fa-wordpress-simple\",\n    \"fab fa-wpbeginner\",\n    \"fab fa-wpexplorer\",\n    \"fab fa-wpforms\",\n    \"fab fa-wpressr\",\n    \"fab fa-xbox\",\n    \"fab fa-xing\",\n    \"fab fa-xing-square\",\n    \"fab fa-y-combinator\",\n    \"fab fa-yahoo\",\n    \"fab fa-yandex\",\n    \"fab fa-yandex-international\",\n    \"fab fa-yarn\",\n    \"fab fa-yelp\",\n    \"fab fa-yoast\",\n    \"fab fa-youtube\",\n    \"fab fa-youtube-square\",\n    \"fab fa-zhihu\",\n];\nexport default icons_;","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport icons_ from \"../block-assets/icons\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n  BlockControls,\n  AlignmentToolbar,\n} from \"@wordpress/block-editor\";\nimport { useState, useRef, useEffect } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nimport {\n  PanelBody,\n  RangeControl,\n  ToggleControl,\n  ColorPicker,\n  SelectControl,\n} from \"@wordpress/components\";\nimport fontFamily from \"../block-assets/font-family\";\nregisterBlockType(\"zita-blocks/icon-block\", {\n  title: __(\"Icon\", \"zita-blocks\"),\n  icon: \"star-empty\",\n  description: __(\n    \"Use a slide title for your main title for the slide.\",\n    \"zita-blocks\"\n  ),\n  category: \"zita-category\",\n  keywords: [\"icon\", \"iconbox\"],\n  attributes: {\n    iconClass: {\n      type: \"string\",\n      default: \"fab fa-wordpress-simple\",\n    },\n    iconColor: {\n      type: \"string\",\n      default: \"#0693e3\",\n    },\n    iconBgColor: {\n      type: \"string\",\n      default: \"#EEF6F9\",\n    },\n    titleColor: {\n      type: \"string\",\n      default: \"#0693e3\",\n    },\n    iconFontsize: {\n      type: \"number\",\n      default: 55,\n    },\n    titleFontsize: {\n      type: \"number\",\n      default: 24,\n    },\n    titleTxt: {\n      type: \"string\",\n      default: __(\"Icon Title\", \"zita-blocks\"),\n    },\n    titleArrenge: {\n      type: \"string\",\n      default: \"column\",\n    },\n    itemAlign: {\n      type: \"text\",\n      default: \"center\",\n    },\n    titleMarginTop: {\n      type: \"number\",\n      defalut: 18,\n    },\n    titleMarginRight: {\n      type: \"number\",\n    },\n    titleMarginBottom: {\n      type: \"number\",\n    },\n    titleMarginLeft: {\n      type: \"number\",\n      default: 11,\n    },\n    titleOnOff: {\n      type: \"boolean\",\n      default: true,\n    },\n    iconPaddingTop: {\n      type: \"number\",\n      default: 16,\n    },\n    iconPaddingRight: {\n      type: \"number\",\n      default: 20,\n    },\n    titleTag: {\n      type: \"string\",\n      default: \"p\",\n    },\n    titleFF: {\n      type: \"string\",\n      default: \"Ubuntu Mono\",\n    },\n    iconBorder: {\n      type: \"boolean\",\n      default: false,\n    },\n    iconBorderWidth: {\n      type: \"number\",\n      default: 2,\n    },\n    iconBorderRadius: {\n      type: \"number\",\n      default: 50,\n    },\n    iconBorderColor: {\n      type: \"string\",\n      default: \"#ffa600\",\n    },\n    iconSpace: {\n      type: \"number\",\n      default: 79,\n    },\n  },\n  example: () => {},\n  // example: {\n  // attributes: {\n  //   backgroundType: \"gradient\",\n  //   backgroundGradient:\n  //     \"linear-gradient(-225deg, rgb(255, 5, 124) 0%, rgb(141, 11, 147) 50%, rgb(50, 21, 117) 100%)\",\n  //   align: \"center\",\n  //   quoteStyle: \"quotes\",\n  //   paddingTop: 30,\n  //   paddingBottom: 30,\n  //   blockquoteAlign: \"center\",\n  //   textColor: \"#FFFFFF\",\n  //   content: \"An inspiring quote...\",\n  // },\n  // },\n  edit: ({ attributes, setAttributes }) => {\n    const {\n      iconClass,\n      iconColor,\n      iconBgColor,\n      titleColor,\n      iconFontsize,\n      titleFF,\n      titleFontsize,\n      titleMarginTop,\n      titleMarginRight,\n      titleMarginBottom,\n      titleMarginLeft,\n      titleTxt,\n      titleArrenge,\n      itemAlign,\n      titleOnOff,\n      iconPaddingTop,\n      iconPaddingRight,\n      titleTag,\n      iconBorder,\n      iconBorderWidth,\n      iconBorderRadius,\n      iconBorderColor,\n      iconSpace,\n    } = attributes;\n\n    let borderStyle = iconBorder\n      ? {\n          borderWidth: iconBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorderColor,\n          borderRadius: iconBorderRadius + \"%\",\n          width: iconSpace + \"px\",\n          height: iconSpace + \"px\",\n        }\n      : null;\n\n    const [activeIconContainer, activeIconContainerSet] = useState(false);\n    const [iconList, setIconList] = useState(icons_);\n    let iconReff = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!iconReff.current.contains(event.target)) {\n          activeIconContainerSet(false);\n        }\n      };\n\n      if (activeIconContainer) document.addEventListener(\"mousedown\", handler);\n      return () => {\n        document.removeEventListener(\"mousedown\", handler);\n      };\n    });\n    const [activeFamilyContainer2, activeFamilyDrop2] = useState(false);\n    let familyRef2 = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef2.current.contains(event.target)) {\n          activeFamilyDrop2(false);\n        }\n      };\n\n      if (activeFamilyContainer2) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Icon Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <p>\n            <strong>{__(\"Choose Icon\", \"zita-blocks\")}</strong>\n          </p>\n\n          <div\n            ref={iconReff}\n            className={`wpgt-radio-wrap ${activeIconContainer ? \"active\" : \"\"}`}\n          >\n            <div\n              className=\"selected-icon\"\n              onClick={(e) => {\n                // let set__container = !activeIconContainer;\n                activeIconContainerSet(true);\n              }}\n            >\n              <i className={iconClass}></i>\n              <div className=\"search-container\">\n                <i className=\"fas fa-search\"></i>\n                <input\n                  type=\"text\"\n                  onChange={(e) => {\n                    let value_ = e.target.value;\n                    if (value_ != \"\") {\n                      let newAr = icons_.filter(\n                        (checkStr) => checkStr.search(value_) != -1\n                      );\n                      if (newAr.length) {\n                        setIconList(newAr);\n                      }\n                    } else {\n                      setIconList(icons_);\n                    }\n                  }}\n                />\n              </div>\n            </div>\n            <div\n              className=\"wpgt-radio-container\"\n              onChange={(e) => {\n                setAttributes({ iconClass: e.target.value });\n              }}\n            >\n              {iconList.map((iconValue) => {\n                return (\n                  <div className=\"wpgt-radio-wrapper\">\n                    <input\n                      id={\"wpgt-Radio-\" + iconValue}\n                      type=\"radio\"\n                      name=\"wpgt-choose-icon\"\n                      className=\"radio-input\"\n                      value={iconValue}\n                    />\n                    <label htmlFor={\"wpgt-Radio-\" + iconValue}>\n                      <i className={iconValue}></i>\n                    </label>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <p>\n            <strong>{__(\"Icon Position\", \"zita-blocks\")}</strong>\n          </p>\n          <SelectControl\n            value={titleArrenge} // e.g: value = [ 'a', 'c' ]\n            onChange={(e) => {\n              setAttributes({\n                titleArrenge: e,\n                titleMarginTop: 0,\n                titleMarginRight: 0,\n                titleMarginBottom: 0,\n                titleMarginLeft: 0,\n              });\n            }}\n            options={[\n              { value: null, label: \"Select a User\", disabled: true },\n              { value: \"unset\", label: \"Left\" },\n              { value: \"row-reverse\", label: \"Right\" },\n              { value: \"column\", label: \"Top\" },\n              { value: \"column-reverse\", label: \"Bottom\" },\n            ]}\n          />\n          <p>\n            <strong>{__(\"Space Between Icon and Title\", \"zita-blocks\")}</strong>\n          </p>\n          {titleArrenge == \"column\" && (\n            <RangeControl\n              label={__(\"Top\", \"zita-blocks\")}\n              value={titleMarginTop}\n              min={0}\n              max={200}\n              onChange={(e) => setAttributes({ titleMarginTop: e })}\n            />\n          )}\n          {titleArrenge == \"row-reverse\" && (\n            <RangeControl\n              label={__(\"Right\", \"zita-blocks\")}\n              value={titleMarginRight}\n              min={0}\n              max={200}\n              onChange={(e) => setAttributes({ titleMarginRight: e })}\n            />\n          )}\n          {titleArrenge == \"column-reverse\" && (\n            <RangeControl\n              label={__(\"Bottom\", \"zita-blocks\")}\n              value={titleMarginBottom}\n              min={0}\n              max={200}\n              onChange={(e) => setAttributes({ titleMarginBottom: e })}\n            />\n          )}\n          {titleArrenge == \"unset\" && (\n            <RangeControl\n              label={__(\"Left\", \"zita-blocks\")}\n              value={titleMarginLeft}\n              min={0}\n              max={200}\n              onChange={(e) => setAttributes({ titleMarginLeft: e })}\n            />\n          )}\n\n          <p>\n            <strong>{__(\"Font Size\", \"zita-blocks\")}</strong>\n          </p>\n          <RangeControl\n            value={iconFontsize}\n            min={0}\n            max={100}\n            onChange={(e) => setAttributes({ iconFontsize: e })}\n          />\n          <p>\n            <strong>{__(\"Border\", \"zita-blocks\")}</strong>\n          </p>\n          <ToggleControl\n            label={\n              iconBorder\n                ? __(\"Disable\", \"zita-blocks\")\n                : __(\"Enable\", \"zita-blocks\")\n            }\n            checked={iconBorder}\n            onChange={(e) => setAttributes({ iconBorder: e })}\n          />\n          {iconBorder && (\n            <div className=\"icon-border-setting\">\n              <RangeControl\n                label={__(\"Border Width\", \"zita-blocks\")}\n                value={iconBorderWidth}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ iconBorderWidth: e })}\n              />\n              <RangeControl\n                label={__(\"Border Radius\", \"zita-blocks\")}\n                value={iconBorderRadius}\n                min={0}\n                max={50}\n                onChange={(e) => setAttributes({ iconBorderRadius: e })}\n              />\n              <p>{__(\"Border Color\", \"zita-blocks\")}</p>\n              <ColorPalette\n                onChange={(color) => setAttributes({ iconBorderColor: color })}\n              />\n              <RangeControl\n                label={__(\"Icon Space\", \"zita-blocks\")}\n                value={iconSpace}\n                min={0}\n                max={200}\n                onChange={(e) => setAttributes({ iconSpace: e })}\n              />\n            </div>\n          )}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Title Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <ToggleControl\n            label={\n              titleOnOff ? __(\"Hide\", \"zita-blocks\") : __(\"Show\", \"zita-blocks\")\n            }\n            checked={titleOnOff}\n            onChange={(e) => setAttributes({ titleOnOff: e })}\n          />\n          <p>\n            <strong>{__(\"Choose Tag\", \"zita-blocks\")}</strong>\n          </p>\n          <SelectControl\n            value={titleTag} // e.g: value = [ 'a', 'c' ]\n            onChange={(e) => setAttributes({ titleTag: e })}\n            options={[\n              {\n                value: null,\n                label: __(\"Choose Tag\", \"zita-blocks\"),\n                disabled: true,\n              },\n              { value: \"h1\", label: \"h1\" },\n              { value: \"h2\", label: \"h2\" },\n              { value: \"h3\", label: \"h3\" },\n              { value: \"p\", label: \"p\" },\n            ]}\n          />\n          <p>\n            <strong>{__(\"Font Size\", \"zita-blocks\")}</strong>\n          </p>\n          <RangeControl\n            value={titleFontsize}\n            min={0}\n            max={100}\n            onChange={(e) => setAttributes({ titleFontsize: e })}\n          />\n          {/* font family */}\n          <div className=\"THK-font-family-wrapper\">\n            <p>\n              <strong>{__(\"Font Family\", \"zita-blocks\")}</strong>\n            </p>\n            <div\n              ref={familyRef2}\n              className={`font-family-drop-down ${\n                activeFamilyContainer2 ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                onClick={() => {\n                  let applyActive = !activeFamilyContainer2;\n                  activeFamilyDrop2(applyActive);\n                }}\n                className=\"font-family-show\"\n              >\n                <span style={{ fontFamily: titleFF }}>\n                  {titleFF ? titleFF : __(\"Choose Family\", \"zita-blocks\")}\n                </span>\n              </div>\n              <div className=\"family-items\">\n                {fontFamily.map((family, key_) => {\n                  return (\n                    <span\n                      onClick={() => setAttributes({ titleFF: family })}\n                      style={{ fontFamily: family }}\n                    >\n                      {family}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          {/* font family */}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Color Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <p>\n            <strong>{__(\"Background Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPicker\n            onChangeComplete={(colorBg) => {\n              let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n              setAttributes({ iconBgColor: color });\n            }}\n          />\n          <p>\n            <strong>{__(\"Icon Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            onChange={(color) => setAttributes({ iconColor: color })}\n          />\n          <p>\n            <strong>{__(\"Title Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette onChange={(e) => setAttributes({ titleColor: e })} />\n        </PanelBody>\n\n        <PanelBody\n          title={__(\"Container Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <p>\n            <strong>{__(\"Padding\", \"zita-blocks\")}</strong>\n          </p>\n          <RangeControl\n            label={__(\"Top & Bottom\", \"zita-blocks\")}\n            value={iconPaddingTop}\n            min={0}\n            max={200}\n            onChange={(e) => setAttributes({ iconPaddingTop: e })}\n          />\n          <RangeControl\n            label={__(\"Left & Right\", \"zita-blocks\")}\n            value={iconPaddingRight}\n            min={0}\n            max={200}\n            onChange={(e) => setAttributes({ iconPaddingRight: e })}\n          />\n        </PanelBody>\n      </InspectorControls>,\n      <>\n        <BlockControls>\n          <AlignmentToolbar\n            value={itemAlign}\n            onChange={(e) => {\n              let side =\n                e == \"left\" ? \"left\" : e == \"right\" ? \"flex-end\" : \"center\";\n              setAttributes({ itemAlign: side });\n            }}\n          />\n        </BlockControls>\n        <div\n          className=\"themehunk-icon-block\"\n          style={{\n            \"justify-content\": itemAlign,\n          }}\n        >\n          <div\n            style={{\n              \"flex-direction\": titleArrenge,\n              backgroundColor: iconBgColor,\n              paddingTop: iconPaddingTop + \"px\",\n              paddingRight: iconPaddingRight + \"px\",\n              paddingBottom: iconPaddingTop + \"px\",\n              paddingLeft: iconPaddingRight + \"px\",\n            }}\n          >\n            <div className=\"icon-container\" style={borderStyle}>\n              <i\n                style={{\n                  color: iconColor,\n                  fontSize: iconFontsize + \"px\",\n                }}\n                className={iconClass}\n              ></i>\n            </div>\n            {titleOnOff && (\n              <div className=\"text-container\">\n                <RichText\n                  key=\"editable\"\n                  tagName={titleTag}\n                  placeholder=\"Icon Title\"\n                  value={titleTxt}\n                  onChange={(e) => setAttributes({ titleTxt: e })}\n                  style={{\n                    color: titleColor,\n                    fontSize: titleFontsize + \"px\",\n                    marginTop: titleMarginTop + \"px\",\n                    marginRight: titleMarginRight + \"px\",\n                    marginBottom: titleMarginBottom + \"px\",\n                    marginLeft: titleMarginLeft + \"px\",\n                    fontFamily: titleFF,\n                  }}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </>,\n    ];\n  },\n  save: ({ attributes }) => {\n    const {\n      iconClass,\n      iconColor,\n      iconBgColor,\n      titleColor,\n      iconFontsize,\n      titleFontsize,\n      titleMarginTop,\n      titleMarginRight,\n      titleMarginBottom,\n      titleMarginLeft,\n      titleTxt,\n      titleArrenge,\n      titleFF,\n      itemAlign,\n      titleOnOff,\n      titleTag,\n      iconBorder,\n      iconBorderWidth,\n      iconBorderRadius,\n      iconBorderColor,\n      iconSpace,\n      iconPaddingTop,\n      iconPaddingRight,\n    } = attributes;\n    let borderStyle = iconBorder\n      ? {\n          borderWidth: iconBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorderColor,\n          borderRadius: iconBorderRadius + \"%\",\n          width: iconSpace + \"px\",\n          height: iconSpace + \"px\",\n        }\n      : null;\n    // console.log(borderStyle);\n\n    return (\n      <div\n        className=\"themehunk-icon-block\"\n        style={{\n          \"justify-content\": itemAlign,\n        }}\n      >\n        <div\n          style={{\n            \"flex-direction\": titleArrenge,\n            backgroundColor: iconBgColor,\n            paddingTop: iconPaddingTop + \"px\",\n            paddingRight: iconPaddingRight + \"px\",\n            paddingBottom: iconPaddingTop + \"px\",\n            paddingLeft: iconPaddingRight + \"px\",\n          }}\n        >\n          <div className=\"icon-container\" style={borderStyle}>\n            <i\n              style={{\n                color: iconColor,\n                fontSize: iconFontsize + \"px\",\n              }}\n              className={iconClass}\n            ></i>\n          </div>\n          {titleOnOff && (\n            <div className=\"text-container\">\n              <RichText.Content\n                tagName={titleTag}\n                value={titleTxt}\n                style={{\n                  color: titleColor,\n                  fontSize: titleFontsize + \"px\",\n                  marginTop: titleMarginTop + \"px\",\n                  marginRight: titleMarginRight + \"px\",\n                  marginBottom: titleMarginBottom + \"px\",\n                  marginLeft: titleMarginLeft + \"px\",\n                  fontFamily: titleFF,\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","import \"./parent\";\nimport \"./editor.scss\";\nimport fontFamily from \"../block-assets/font-family\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport { __ } from \"@wordpress/i18n\";\n\nimport { useState, useRef, useEffect } from \"@wordpress/element\";\nimport {\n  PanelBody,\n  RangeControl,\n  ColorPicker,\n  ToggleControl,\n} from \"@wordpress/components\";\nconst attrS = {\n  headingTxt: {\n    type: \"string\",\n    default: __(\"Basic\", \"zita-blocks\"),\n  },\n  headingFontSize: {\n    type: \"number\",\n    default: 29,\n  },\n  headingColor: {\n    type: \"string\",\n    default: \"#ffffff\",\n  },\n  headingFF: {\n    type: \"string\",\n  },\n  headingDescription: {\n    type: \"string\",\n  },\n  headerBackground: {\n    type: \"string\",\n    default: \"#5f5f5f\",\n  },\n  descriptionColor: {\n    type: \"string\",\n    default: \"grey\",\n  },\n  descriptionFontSize: {\n    type: \"number\",\n  },\n  descriptionFF: {\n    type: \"string\",\n  },\n  middleTxt: {\n    type: \"string\",\n    default:\n      \"<p>Email Marketing</p><p>Email Builder</p><p>Client Testing</p><p>2 User Free</p><p>Multiple Email Support</p>\",\n  },\n  pointsColor: {\n    type: \"string\",\n    default: \"white\",\n  },\n  middleBgColor: {\n    type: \"string\",\n    default: \"#2B2B2B\",\n  },\n  pointsFontSize: {\n    type: \"number\",\n    default: 16,\n  },\n  pointsSpaceBw: {\n    type: \"number\",\n    default: 24,\n  },\n  pointAlign: {\n    type: \"string\",\n    default: \"center\",\n  },\n  pointsFF: {\n    type: \"string\",\n  },\n  currencyC: { type: \"string\", default: \"$\" },\n  // currencyColor: { type: \"string\" },\n  currencyFs: { type: \"number\", default: 16 },\n  priceMonth: {\n    type: \"string\",\n    default: \"99\",\n  },\n  currencyFormate: {\n    type: \"boolean\",\n    default: true,\n  },\n  currencyFontWeight: { type: \"string\" },\n  priceMonthPrice: {\n    type: \"string\",\n    default: \"/ month\",\n  },\n  priceMonthPriceFs: {\n    type: \"string\",\n  },\n  priceMonthPriceColor: {\n    type: \"string\",\n    default: \"#c2c4c4\",\n  },\n  pricePosition: {\n    type: \"string\",\n    default: \"top\",\n  },\n  priceFontSize: {\n    type: \"number\",\n    default: 50,\n  },\n  priceColor: {\n    type: \"string\",\n    default: \"#ffffff\",\n  },\n  priceBgColor: {\n    type: \"string\",\n  },\n  priceFF: {\n    type: \"string\",\n  },\n  priceInline: { type: \"boolean\", default: true },\n  pricePadding: { type: \"number\", default: 0 },\n  priceBorder: { type: \"boolean\", default: false },\n  priceBorderWidth: {\n    type: \"number\",\n    default: 2,\n  },\n  priceBorderRadius: {\n    type: \"number\",\n    default: 50,\n  },\n  priceBorderColor: {\n    type: \"string\",\n    default: \"#ffa600\",\n  },\n  priceSpace: {\n    type: \"number\",\n    default: 100,\n  },\n  linkTxt: {\n    type: \"string\",\n    default: __(\"ORDER NOW\", \"zita-blocks\"),\n  },\n  linkLink: {\n    type: \"string\",\n    default: \"#\",\n  },\n  linkTarget: {\n    type: \"boolean\",\n    default: false,\n  },\n  linkColor: {\n    type: \"string\",\n  },\n  linkBgColor: {\n    type: \"string\",\n    default: \"#f1b426\",\n  },\n  linkFontSize: {\n    type: \"number\",\n  },\n  linkBorder: { type: \"boolean\", default: false },\n  linkBorderWidth: { type: \"number\", default: 1 },\n  linkBorderRadius: { type: \"number\", default: 2 },\n  linkBorderColor: { type: \"string\" },\n  linkSpaceV: { type: \"number\", default: 14 },\n  linkSpaceH: { type: \"number\", default: 45 },\n  bottomTxt: {\n    type: \"string\",\n    default: __(\"Terms & Conditions\", \"zita-blocks\"),\n  },\n  bottomTxtColor: {\n    type: \"string\",\n    default: \"white\",\n  },\n  bottomTxtFontSize: {\n    type: \"number\",\n  },\n  bottomTxtFF: {\n    type: \"string\",\n  },\n  footerBgColor: { type: \"string\", default: \"#2B2B2B\" },\n  // containerBgColor: {\n  //   type: \"string\",\n  // },\n  containerBorder: {\n    type: \"boolean\",\n    default: false,\n  },\n  containerBorderWidth: {\n    type: \"number\",\n  },\n  containerBorderRadius: {\n    type: \"number\",\n  },\n  containerBorderColor: {\n    type: \"string\",\n  },\n};\n\nregisterBlockType(\"zita-blocks/pricing-table-table\", {\n  title: __(\"Price Table Colomn\", \"zita-blocks\"),\n  icon: \"table-col-before\",\n  category: \"zita-category\",\n  parent: [\"zita-blocks/pricing-table-section\"],\n  keywords: [\"price\", \"pricebox\"],\n  attributes: attrS,\n  example: () => {},\n  edit: (props) => {\n    const { attributes, setAttributes } = props;\n    const {\n      headerBackground,\n      headingTxt,\n      headingFontSize,\n      headingColor,\n      headingFF,\n      headingDescription,\n      descriptionColor,\n      descriptionFontSize,\n      descriptionFF,\n      middleTxt,\n      middleBgColor,\n      pointsColor,\n      pointsFontSize,\n      pointsSpaceBw,\n      pointsFF,\n      pointAlign,\n      priceMonth,\n      priceMonthPrice,\n      priceMonthPriceFs,\n      priceMonthPriceColor,\n      pricePosition,\n      priceFontSize,\n      priceColor,\n      priceBgColor,\n      priceFF,\n      priceInline,\n      currencyFontWeight,\n      priceBorder,\n      priceBorderWidth,\n      priceBorderRadius,\n      priceBorderColor,\n      priceSpace,\n      priceSpaceV,\n      priceSpaceH,\n      currencyC,\n      // currencyColor,\n      currencyFs,\n      currencyFormate,\n\n      linkTxt,\n      linkLink,\n      linkTarget,\n      linkColor,\n      linkBgColor,\n      linkFontSize,\n      linkBorder,\n      linkBorderWidth,\n      linkBorderRadius,\n      linkBorderColor,\n      linkSpaceH,\n      linkSpaceV,\n      bottomTxt,\n      bottomTxtColor,\n      bottomTxtFontSize,\n      bottomTxtFF,\n      footerBgColor,\n      // container\n      // containerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n    } = attributes;\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    let priceStyle = {\n      backgroundColor: priceBgColor,\n      fontFamily: priceFF,\n      fontWeight: currencyFontWeight,\n    };\n\n    if (priceBorder)\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          borderWidth: priceBorderWidth + \"px\",\n          borderRadius: priceBorderRadius + (!priceInline ? \"%\" : \"px\"),\n          borderColor: priceBorderColor,\n          borderStyle: \"solid\",\n        },\n      };\n    if (!priceInline) {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          height: priceSpace + \"px\",\n          width: priceSpace + \"px\",\n        },\n      };\n    } else {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          paddingTop: priceSpaceV + \"px\",\n          paddingBottom: priceSpaceV + \"px\",\n          paddingLeft: priceSpaceH + \"px\",\n          paddingRight: priceSpaceH + \"px\",\n        },\n      };\n    }\n\n    let link_style = {\n      color: linkColor,\n      backgroundColor: linkBgColor,\n      fontSize: linkFontSize + \"px\",\n      paddingLeft: linkSpaceH + \"px\",\n      paddingRight: linkSpaceH + \"px\",\n      paddingTop: linkSpaceV + \"px\",\n      paddingBottom: linkSpaceV + \"px\",\n    };\n    link_style = linkBorder\n      ? {\n          ...{\n            borderWidth: linkBorderWidth + \"px\",\n            borderRadius: linkBorderRadius + \"px\",\n            borderStyle: \"solid\",\n            borderColor: linkBorderColor,\n          },\n          ...link_style,\n        }\n      : link_style;\n\n    // one\n    const [activeFamilyContainer, activeFamilyDrop] = useState(false);\n    let familyRef = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef.current.contains(event.target)) {\n          activeFamilyDrop(false);\n        }\n      };\n\n      if (activeFamilyContainer) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n    // two\n    const [activeFamilyContainer2, activeFamilyDrop2] = useState(false);\n    let familyRef2 = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef2.current.contains(event.target)) {\n          activeFamilyDrop2(false);\n        }\n      };\n\n      if (activeFamilyContainer2) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Header Section\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <p className=\"block-inside\">{__(\"Header Setting\", \"zita-blocks\")}</p>\n          {/* font family */}\n          <div className=\"THK-font-family-wrapper\">\n            <p>\n              <strong>{__(\"Font Family\", \"zita-blocks\")}</strong>\n            </p>\n            <div\n              ref={familyRef}\n              className={`font-family-drop-down ${\n                activeFamilyContainer ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                onClick={() => {\n                  let applyActive = !activeFamilyContainer;\n                  activeFamilyDrop(applyActive);\n                }}\n                className=\"font-family-show\"\n              >\n                <span style={{ fontFamily: headingFF }}>\n                  {headingFF ? headingFF : \"Choose Family\"}\n                </span>\n              </div>\n              <div className=\"family-items\">\n                {fontFamily.map((family, key_) => {\n                  return (\n                    <span\n                      onClick={() => setAttributes({ headingFF: family })}\n                      style={{ fontFamily: family }}\n                    >\n                      {family}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          {/* font family */}\n          <p>\n            <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={headingColor}\n            onChange={(color) => setAttributes({ headingColor: color })}\n          />\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={headingFontSize}\n            min={0}\n            max={60}\n            onChange={(e) => setAttributes({ headingFontSize: e })}\n          />\n          <p className=\"block-inside\">\n            {__(\"Short Description\", \"zita-blocks\")}\n          </p>\n\n          {/* font family */}\n          <div className=\"THK-font-family-wrapper\">\n            <p>\n              <strong>{__(\"Font Family\", \"zita-blocks\")}</strong>\n            </p>\n            <div\n              ref={familyRef2}\n              className={`font-family-drop-down ${\n                activeFamilyContainer2 ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                onClick={() => {\n                  let applyActive = !activeFamilyContainer2;\n                  activeFamilyDrop2(applyActive);\n                }}\n                className=\"font-family-show\"\n              >\n                <span style={{ fontFamily: descriptionFF }}>\n                  {descriptionFF ? descriptionFF : \"Choose Family\"}\n                </span>\n              </div>\n              <div className=\"family-items\">\n                {fontFamily.map((family, key_) => {\n                  return (\n                    <span\n                      onClick={() => setAttributes({ descriptionFF: family })}\n                      style={{ fontFamily: family }}\n                    >\n                      {family}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          {/* font family */}\n\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={descriptionFontSize}\n            min={0}\n            max={60}\n            onChange={(e) => setAttributes({ descriptionFontSize: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={descriptionColor}\n            onChange={(color) => setAttributes({ descriptionColor: color })}\n          />\n          <p className=\"block-inside\">\n            {__(\"Background Color\", \"zita-blocks\")}\n          </p>\n          <ColorPicker\n            color={headerBackground}\n            onChangeComplete={(colorBg) => {\n              let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n              setAttributes({ headerBackground: color });\n            }}\n          />\n        </PanelBody>\n        <PanelBody title={\"Price Setting\"} initialOpen={false}>\n          <p className=\"block-inside\">{__(\"Position\", \"zita-blocks\")}</p>\n          <div className=\"column-layout-num-column text_\">\n            <div>\n              <input\n                type=\"radio\"\n                name=\"price-position\"\n                id=\"price-position-top\"\n                checked={pricePosition == \"top\" ? true : false}\n                onChange={() => setAttributes({ pricePosition: \"top\" })}\n              />\n              <label for=\"price-position-top\">{__(\"Top\", \"zita-blocks\")}</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                name=\"price-position\"\n                id=\"price-position-bottom\"\n                checked={pricePosition == \"bottom\" ? true : false}\n                onChange={() => setAttributes({ pricePosition: \"bottom\" })}\n              />\n              <label for=\"price-position-bottom\">\n                {__(\"Bottom\", \"zita-blocks\")}\n              </label>\n            </div>\n          </div>\n          <p className=\"block-inside\">{__(\"Price\", \"zita-blocks\")}</p>\n          <div className=\"flex-section\">\n            <p>{__(\"Price\", \"zita-blocks\")}</p>\n            <input\n              type=\"number\"\n              value={priceMonth}\n              onChange={(e) => {\n                setAttributes({ priceMonth: e.target.value });\n              }}\n            />\n          </div>\n          <p>{__(\"Color\", \"zita-blocks\")}</p>\n          <ColorPalette\n            value={priceColor}\n            onChange={(color) => setAttributes({ priceColor: color })}\n          />\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={priceFontSize}\n            min={0}\n            max={100}\n            onChange={(e) => setAttributes({ priceFontSize: e })}\n          />\n          <p className=\"block-inside\">{__(\"Currency\", \"zita-blocks\")}</p>\n\n          <div className=\"flex-section\">\n            <p>{__(\"Currency\", \"zita-blocks\")}</p>\n            <select\n              value={currencyC}\n              onChange={(e) => {\n                setAttributes({ currencyC: e.target.value });\n              }}\n            >\n              {[\n                [\"$\", \"Dollar\"],\n                [\"€\", \"Euro\"],\n                [\"฿\", \"Baht\"],\n                [\"₣\", \"Franc\"],\n                [\"ƒ\", \"Guilder\"],\n                [\"kr\", \"Krona\"],\n                [\"₤\", \"Lira\"],\n                [\"₹\", \"Rupee (Indian)\"],\n                [\"₧\", \"Peseta\"],\n                [\"₱\", \"Peso\"],\n                [\"£\", \"Pound Sterling\"],\n                [\"R$\", \"Real\"],\n                [\"₽\", \"Ruble\"],\n                [\"₨\", \"Rupee\"],\n                [\"₪\", \"Shekel\"],\n                [\"¥\", \"Yen/Yuan\"],\n                [\"₩\", \"Won\"],\n                [\"\", \"Custom\"],\n              ].map((v) => (\n                <option value={v[0]}>{v[0] + \" \" + v[1]}</option>\n              ))}\n            </select>\n          </div>\n          {/* <p>Color</p>\n          <ColorPalette\n            value={currencyColor}\n            onChange={(color) => setAttributes({ currencyColor: color })}\n          />*/}\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={currencyFs}\n            min={0}\n            max={60}\n            onChange={(e) => setAttributes({ currencyFs: e })}\n          />\n          <div className=\"flex-section\">\n            <p>{__(\"Formate\", \"zita-blocks\")}</p>\n            <select\n              value={currencyFormate}\n              onChange={(e) => {\n                let raised = e.target.value == 1 ? true : false;\n                setAttributes({ currencyFormate: raised });\n                if (raised) setAttributes({ currencyFs: 8 });\n              }}\n            >\n              <option value=\"0\">{__(\"Normal\", \"zita-blocks\")}</option>\n              <option value=\"1\">{__(\"Rasied\", \"zita-blocks\")}</option>\n            </select>\n          </div>\n          <p className=\"block-inside\">{__(\"Text\", \"zita-blocks\")}</p>\n\n          <div className=\"flex-section\">\n            <p>{__(\"Enter Text\", \"zita-blocks\")}</p>\n            <input\n              type=\"text\"\n              value={priceMonthPrice}\n              onChange={(e) => {\n                setAttributes({ priceMonthPrice: e.target.value });\n              }}\n            />\n          </div>\n          <p>{__(\"Color\", \"zita-blocks\")}</p>\n          <ColorPalette\n            value={priceMonthPriceColor}\n            onChange={(color) => setAttributes({ priceMonthPriceColor: color })}\n          />\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={priceMonthPriceFs}\n            min={0}\n            max={100}\n            onChange={(e) => setAttributes({ priceMonthPriceFs: e })}\n          />\n\n          <p className=\"block-inside\">{__(\"Advance Setting\", \"zita-blocks\")}</p>\n          <p>{__(\"Layout\", \"zita-blocks\")}</p>\n          <div className=\"column-layout-num-column text_\">\n            <div>\n              <input\n                type=\"radio\"\n                id=\"price-layout-rounded\"\n                name=\"price-layout\"\n                checked={!priceInline ? true : false}\n                onChange={() => setAttributes({ priceInline: false })}\n              />\n              <label for=\"price-layout-rounded\">\n                {__(\"Rounded\", \"zita-blocks\")}\n              </label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                id=\"price-layout-box\"\n                name=\"price-layout\"\n                checked={priceInline ? true : false}\n                onChange={() => setAttributes({ priceInline: true })}\n              />\n              <label for=\"price-layout-box\">{__(\"Box\", \"zita-blocks\")}</label>\n            </div>\n          </div>\n\n          {!priceInline && (\n            <RangeControl\n              label={__(\"Price Space\", \"zita-blocks\")}\n              value={priceSpace}\n              min={0}\n              max={200}\n              onChange={(e) => setAttributes({ priceSpace: e })}\n            />\n          )}\n          {priceInline && (\n            <>\n              <RangeControl\n                label={__(\"Top/Bottom\", \"zita-blocks\")}\n                value={priceSpaceV}\n                min={0}\n                max={200}\n                onChange={(e) => setAttributes({ priceSpaceV: e })}\n              />\n              <RangeControl\n                label={__(\"Left/Right\", \"zita-blocks\")}\n                value={priceSpaceH}\n                min={0}\n                max={200}\n                onChange={(e) => setAttributes({ priceSpaceH: e })}\n              />\n            </>\n          )}\n\n          <p>\n            <strong>{__(\"Border\", \"zita-blocks\")}</strong>\n          </p>\n\n          <ToggleControl\n            label={\n              priceBorder\n                ? __(\"Disable\", \"zita-blocks\")\n                : __(\"Enable\", \"zita-blocks\")\n            }\n            checked={priceBorder}\n            onChange={(e) => setAttributes({ priceBorder: e })}\n          />\n          {priceBorder && (\n            <div className=\"icon-border-setting\">\n              <RangeControl\n                label={__(\"Border Width\", \"zita-blocks\")}\n                value={priceBorderWidth}\n                min={0}\n                max={20}\n                onChange={(e) => setAttributes({ priceBorderWidth: e })}\n              />\n              <RangeControl\n                label={__(\"Border Radius\", \"zita-blocks\")}\n                value={priceBorderRadius}\n                min={0}\n                max={50}\n                onChange={(e) => setAttributes({ priceBorderRadius: e })}\n              />\n              <p>{__(\"Border Color\", \"zita-blocks\")}</p>\n              <ColorPalette\n                value={priceBorderColor}\n                onChange={(color) => setAttributes({ priceBorderColor: color })}\n              />\n            </div>\n          )}\n          {/* font family */}\n          <div className=\"THK-font-family-wrapper\">\n            <p>\n              <strong>{__(\"Font Family\", \"zita-blocks\")}</strong>\n            </p>\n            <div\n              ref={familyRef}\n              className={`font-family-drop-down ${\n                activeFamilyContainer ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                ref={familyRef}\n                onClick={() => {\n                  let applyActive = !activeFamilyContainer;\n                  activeFamilyDrop(applyActive);\n                }}\n                className=\"font-family-show\"\n              >\n                <span style={{ fontFamily: priceFF }}>\n                  {priceFF ? priceFF : __(\"Choose Family\", \"zita-blocks\")}\n                </span>\n              </div>\n              <div className=\"family-items\">\n                {fontFamily.map((family, key_) => {\n                  return (\n                    <span\n                      onClick={() => setAttributes({ priceFF: family })}\n                      style={{ fontFamily: family }}\n                    >\n                      {family}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          {/* font family */}\n          {/* font weight */}\n          <div className=\"flex-section\">\n            <p>{__(\"Font Weight\", \"zita-blocks\")}</p>\n            <select\n              value={currencyFontWeight}\n              onChange={(e) => {\n                setAttributes({ currencyFontWeight: e.target.value });\n              }}\n            >\n              <option value=\"400\">400</option>\n              <option value=\"500\">500</option>\n              <option value=\"700\">700</option>\n              <option value=\"900\">900</option>\n              <option value=\"bold\">Bold</option>\n              <option value=\"bolder\">Bolder</option>\n            </select>\n          </div>\n          {/* font weight */}\n          <p>\n            <strong>{__(\"Background Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPicker\n            color={priceBgColor}\n            onChangeComplete={(colorBg) => {\n              let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n              setAttributes({ priceBgColor: color });\n            }}\n          />\n        </PanelBody>\n        <PanelBody title={\"Middle Section\"} initialOpen={false}>\n          {/* font family */}\n          <div className=\"THK-font-family-wrapper\">\n            <p>\n              <strong>{__(\"Font Family\", \"zita-blocks\")}</strong>\n            </p>\n            <div\n              ref={familyRef}\n              className={`font-family-drop-down ${\n                activeFamilyContainer ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                ref={familyRef}\n                onClick={() => {\n                  let applyActive = !activeFamilyContainer;\n                  activeFamilyDrop(applyActive);\n                }}\n                className=\"font-family-show\"\n              >\n                <span style={{ fontFamily: pointsFF }}>\n                  {pointsFF ? pointsFF : __(\"Choose Family\", \"zita-blocks\")}\n                </span>\n              </div>\n              <div className=\"family-items\">\n                {fontFamily.map((family, key_) => {\n                  return (\n                    <span\n                      onClick={() => setAttributes({ pointsFF: family })}\n                      style={{ fontFamily: family }}\n                    >\n                      {family}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          {/* font family */}\n\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={pointsFontSize}\n            min={0}\n            max={60}\n            onChange={(e) => setAttributes({ pointsFontSize: e })}\n          />\n          <RangeControl\n            label={__(\"Space Between Text\", \"zita-blocks\")}\n            value={pointsSpaceBw}\n            min={0}\n            max={60}\n            onChange={(e) => setAttributes({ pointsSpaceBw: e })}\n          />\n          <p>\n            <strong>{__(\"Text Align\", \"zita-blocks\")}</strong>\n          </p>\n          <div className=\"column-layout-num-column text_\">\n            <div>\n              <input\n                type=\"radio\"\n                name=\"points-align\"\n                id=\"points-align-top\"\n                checked={pointAlign == \"left\" ? true : false}\n                onChange={() => setAttributes({ pointAlign: \"left\" })}\n              />\n              <label for=\"points-align-top\">{__(\"Left\", \"zita-blocks\")}</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                name=\"points-align\"\n                id=\"points-align-bottom\"\n                checked={pointAlign == \"center\" ? true : false}\n                onChange={() => setAttributes({ pointAlign: \"center\" })}\n              />\n              <label for=\"points-align-bottom\">\n                {__(\"Center\", \"zita-blocks\")}\n              </label>\n            </div>\n          </div>\n\n          <p>\n            <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={pointsColor}\n            onChange={(color) => setAttributes({ pointsColor: color })}\n          />\n          <p>\n            <strong>{__(\"Background Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPicker\n            color={middleBgColor}\n            onChangeComplete={(colorBg) => {\n              let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n              setAttributes({ middleBgColor: color });\n            }}\n          />\n        </PanelBody>\n\n        <PanelBody\n          title={__(\"Button Section\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <p className=\"block-inside\">{__(\"Button\", \"zita-blocks\")}</p>\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={linkFontSize}\n            min={0}\n            max={70}\n            onChange={(e) => setAttributes({ linkFontSize: e })}\n          />\n          <p>{__(\"Color\", \"zita-blocks\")}</p>\n          <ColorPalette\n            value={linkColor}\n            onChange={(color) => setAttributes({ linkColor: color })}\n          />\n          <p>{__(\"Background Color\", \"zita-blocks\")}</p>\n          <ColorPalette\n            value={linkBgColor}\n            onChange={(color) => setAttributes({ linkBgColor: color })}\n          />\n          <RangeControl\n            label={__(\"Height\", \"zita-blocks\")}\n            value={linkSpaceV}\n            min={0}\n            max={200}\n            onChange={(e) => setAttributes({ linkSpaceV: e })}\n          />\n          <RangeControl\n            label={__(\"Width\", \"zita-blocks\")}\n            value={linkSpaceH}\n            min={0}\n            max={200}\n            onChange={(e) => setAttributes({ linkSpaceH: e })}\n          />\n          <p>\n            <strong>{__(\"Border\", \"zita-blocks\")}</strong>\n          </p>\n          <ToggleControl\n            label={\n              linkBorder\n                ? __(\"Disable\", \"zita-blocks\")\n                : __(\"Enable\", \"zita-blocks\")\n            }\n            checked={linkBorder}\n            onChange={(e) => setAttributes({ linkBorder: e })}\n          />\n          {linkBorder && (\n            <div className=\"icon-border-setting\">\n              <RangeControl\n                label={__(\"Border Width\", \"zita-blocks\")}\n                value={linkBorderWidth}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ linkBorderWidth: e })}\n              />\n              <RangeControl\n                label={__(\"Border Radius\", \"zita-blocks\")}\n                value={linkBorderRadius}\n                min={0}\n                max={50}\n                onChange={(e) => setAttributes({ linkBorderRadius: e })}\n              />\n              <p>{__(\"Border Color\", \"zita-blocks\")}</p>\n              <ColorPalette\n                value={linkBorderColor}\n                onChange={(color) => setAttributes({ linkBorderColor: color })}\n              />\n            </div>\n          )}\n\n          <p className=\"block-inside\">{__(\"Small Text\", \"zita-blocks\")}</p>\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={bottomTxtFontSize}\n            min={0}\n            max={70}\n            onChange={(e) => setAttributes({ bottomTxtFontSize: e })}\n          />\n          <p>{__(\"Color\", \"zita-blocks\")}</p>\n          <ColorPalette\n            value={bottomTxtColor}\n            onChange={(color) => setAttributes({ bottomTxtColor: color })}\n          />\n          {/* font family */}\n          <div className=\"THK-font-family-wrapper\">\n            <p>\n              <strong>{__(\"Font Family\", \"zita-blocks\")}</strong>\n            </p>\n            <div\n              ref={familyRef}\n              className={`font-family-drop-down ${\n                activeFamilyContainer ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                ref={familyRef}\n                onClick={() => {\n                  let applyActive = !activeFamilyContainer;\n                  activeFamilyDrop(applyActive);\n                }}\n                className=\"font-family-show\"\n              >\n                <span style={{ fontFamily: bottomTxtFF }}>\n                  {bottomTxtFF\n                    ? bottomTxtFF\n                    : __(\"Choose Family\", \"zita-blocks\")}\n                </span>\n              </div>\n              <div className=\"family-items\">\n                {fontFamily.map((family, key_) => {\n                  return (\n                    <span\n                      onClick={() => setAttributes({ bottomTxtFF: family })}\n                      style={{ fontFamily: family }}\n                    >\n                      {family}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          {/* font family */}\n          <p className=\"block-inside\">\n            {__(\"Background Color\", \"zita-blocks\")}\n          </p>\n          <ColorPicker\n            color={footerBgColor}\n            onChangeComplete={(colorBg) => {\n              let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n              setAttributes({ footerBgColor: color });\n            }}\n          />\n        </PanelBody>\n\n        <PanelBody\n          title={__(\"Container Settings\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          {/* <ColorPicker\n            onChangeComplete={(colorBg) => {\n              let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n              setAttributes({ containerBgColor: color });\n            }}\n          /> */}\n          <p>\n            <strong>{__(\"Border\", \"zita-blocks\")}</strong>\n          </p>\n          <ToggleControl\n            label={\n              containerBorder\n                ? __(\"Disable\", \"zita-blocks\")\n                : __(\"Enable\", \"zita-blocks\")\n            }\n            checked={containerBorder}\n            onChange={(e) => setAttributes({ containerBorder: e })}\n          />\n          {containerBorder && (\n            <div className=\"icon-border-setting\">\n              <RangeControl\n                label={__(\"Border Width\", \"zita-blocks\")}\n                value={containerBorderWidth}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ containerBorderWidth: e })}\n              />\n              <RangeControl\n                label={__(\"Border Radius\", \"zita-blocks\")}\n                value={containerBorderRadius}\n                min={0}\n                max={50}\n                onChange={(e) => setAttributes({ containerBorderRadius: e })}\n              />\n              <p>{__(\"Border Color\", \"zita-blocks\")}</p>\n              <ColorPalette\n                value={containerBorderColor}\n                onChange={(color) =>\n                  setAttributes({ containerBorderColor: color })\n                }\n              />\n            </div>\n          )}\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"pricing-table-wrapper\" style={containerBorderStyle}>\n        <div\n          style={{ backgroundColor: headerBackground }}\n          className=\"pricing-table-top\"\n          style={{ backgroundColor: headerBackground }}\n        >\n          <RichText\n            key=\"editable\"\n            tagName=\"h3\"\n            placeholder={__(\"Pricing Table\", \"zita-blocks\")}\n            value={headingTxt}\n            style={{\n              fontSize: headingFontSize + \"px\",\n              color: headingColor,\n              fontFamily: headingFF,\n            }}\n            onChange={(e) => setAttributes({ headingTxt: e })}\n          />\n          {pricePosition == \"top\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <RichText\n            key=\"editable\"\n            tagName=\"p\"\n            style={{\n              fontSize: descriptionFontSize + \"px\",\n              color: descriptionColor,\n              fontFamily: descriptionFF,\n            }}\n            value={headingDescription}\n            onChange={(e) => setAttributes({ headingDescription: e })}\n          />\n        </div>\n        <div\n          className=\"pricing-table-middle\"\n          style={{ backgroundColor: middleBgColor }}\n        >\n          <RichText\n            key=\"editable\"\n            tagName=\"div\"\n            placeholder={__(\"Pricing Description\", \"zita-blocks\")}\n            multiline=\"p\"\n            style={{\n              fontSize: pointsFontSize + \"px\",\n              color: pointsColor,\n              fontFamily: pointsFF,\n              marginTop: pointsSpaceBw + \"px\",\n              marginBottom: pointsSpaceBw + \"px\",\n              textAlign: pointAlign,\n            }}\n            value={middleTxt}\n            onChange={(e) => {\n              setAttributes({ middleTxt: e });\n            }}\n          />\n        </div>\n        <div\n          className=\"pricing-table-bottom\"\n          style={{ backgroundColor: footerBgColor }}\n        >\n          {pricePosition == \"bottom\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <div className=\"link_button\">\n            <RichText\n              key=\"editable\"\n              tagName=\"a\"\n              placeholder={__(\"Click Me\", \"zita-blocks\")}\n              value={linkTxt}\n              onChange={(e) => setAttributes({ linkTxt: e })}\n              style={link_style}\n            />\n          </div>\n          <RichText\n            className=\"bottom-text\"\n            key=\"editable\"\n            tagName=\"p\"\n            placeholder={__(\"Price\", \"zita-blocks\")}\n            value={bottomTxt}\n            onChange={(e) => setAttributes({ bottomTxt: e })}\n            style={{\n              color: bottomTxtColor,\n              fontSize: bottomTxtFontSize + \"px\",\n              fontFamily: bottomTxtFF,\n            }}\n          />\n        </div>\n      </div>,\n    ];\n  },\n  save: (props) => {\n    const {\n      headerBackground,\n      headingTxt,\n      headingFontSize,\n      headingColor,\n      headingFF,\n      headingDescription,\n      descriptionColor,\n      descriptionFontSize,\n      descriptionFF,\n      middleTxt,\n      middleBgColor,\n      pointsColor,\n      pointsFontSize,\n      pointAlign,\n      pointsSpaceBw,\n      pointsFF,\n      priceMonth,\n      priceMonthPrice,\n      priceMonthPriceFs,\n      priceMonthPriceColor,\n      pricePosition,\n      priceFontSize,\n      priceColor,\n      priceBgColor,\n      priceFF,\n      priceInline,\n      currencyFontWeight,\n      priceBorder,\n      priceBorderWidth,\n      priceBorderRadius,\n      priceBorderColor,\n      priceSpace,\n      priceSpaceV,\n      priceSpaceH,\n      currencyC,\n      // currencyColor,\n      currencyFs,\n      currencyFormate,\n\n      linkTxt,\n      linkLink,\n      linkTarget,\n      linkColor,\n      linkBgColor,\n      linkFontSize,\n      linkBorder,\n      linkBorderWidth,\n      linkBorderRadius,\n      linkBorderColor,\n      linkSpaceH,\n      linkSpaceV,\n      bottomTxt,\n      bottomTxtColor,\n      bottomTxtFontSize,\n      bottomTxtFF,\n      footerBgColor,\n      // container\n      // containerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n    } = props.attributes;\n\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    // price style\n    let priceStyle = {\n      backgroundColor: priceBgColor,\n      fontFamily: priceFF,\n      fontWeight: currencyFontWeight,\n    };\n    if (priceBorder)\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          borderWidth: priceBorderWidth + \"px\",\n          borderRadius: priceBorderRadius + (!priceInline ? \"%\" : \"px\"),\n          borderColor: priceBorderColor,\n          borderStyle: \"solid\",\n        },\n      };\n    if (!priceInline) {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          height: priceSpace + \"px\",\n          width: priceSpace + \"px\",\n        },\n      };\n    } else {\n      priceStyle = {\n        ...priceStyle,\n        ...{\n          paddingTop: priceSpaceV + \"px\",\n          paddingBottom: priceSpaceV + \"px\",\n          paddingLeft: priceSpaceH + \"px\",\n          paddingRight: priceSpaceH + \"px\",\n        },\n      };\n    }\n    let link_style = {\n      color: linkColor,\n      backgroundColor: linkBgColor,\n      fontSize: linkFontSize + \"px\",\n      paddingLeft: linkSpaceH + \"px\",\n      paddingRight: linkSpaceH + \"px\",\n      paddingTop: linkSpaceV + \"px\",\n      paddingBottom: linkSpaceV + \"px\",\n    };\n    link_style = linkBorder\n      ? {\n          ...{\n            borderWidth: linkBorderWidth + \"px\",\n            borderRadius: linkBorderRadius + \"px\",\n            borderStyle: \"solid\",\n            borderColor: linkBorderColor,\n          },\n          ...link_style,\n        }\n      : link_style;\n\n    return (\n      <div className=\"pricing-table-wrapper\" style={containerBorderStyle}>\n        <div\n          style={{ backgroundColor: headerBackground }}\n          className=\"pricing-table-top\"\n          style={{ backgroundColor: headerBackground }}\n        >\n          <RichText.Content\n            tagName=\"h3\"\n            value={headingTxt}\n            style={{\n              fontSize: headingFontSize + \"px\",\n              color: headingColor,\n              fontFamily: headingFF,\n            }}\n          />\n          {pricePosition == \"top\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <RichText.Content\n            tagName=\"p\"\n            style={{\n              fontSize: descriptionFontSize + \"px\",\n              color: descriptionColor,\n              fontFamily: descriptionFF,\n            }}\n            value={headingDescription}\n          />\n        </div>\n        <div\n          className=\"pricing-table-middle\"\n          style={{ backgroundColor: middleBgColor }}\n        >\n          <RichText.Content\n            tagName=\"div\"\n            multiline=\"p\"\n            style={{\n              fontSize: pointsFontSize + \"px\",\n              color: pointsColor,\n              fontFamily: pointsFF,\n              marginTop: pointsSpaceBw + \"px\",\n              marginBottom: pointsSpaceBw + \"px\",\n              textAlign: pointAlign,\n            }}\n            value={middleTxt}\n          />\n        </div>\n        <div\n          className=\"pricing-table-bottom\"\n          style={{ backgroundColor: footerBgColor }}\n        >\n          {pricePosition == \"bottom\" && (\n            <div\n              className={`price_ ${priceInline ? \"inline_\" : \"box_\"}`}\n              style={priceStyle}\n            >\n              <div\n                style={{ color: priceColor }}\n                className={currencyFormate ? \"rasied\" : \"\"}\n              >\n                <p style={{ fontSize: currencyFs }}>{currencyC}</p>\n                <p style={{ fontSize: priceFontSize + \"px\" }}>{priceMonth}</p>\n              </div>\n              <p\n                style={{\n                  fontSize: priceMonthPriceFs + \"px\",\n                  color: priceMonthPriceColor,\n                }}\n              >\n                {priceMonthPrice}\n              </p>\n            </div>\n          )}\n          <div className=\"link_button\">\n            <RichText.Content tagName=\"a\" value={linkTxt} style={link_style} />\n          </div>\n          <RichText.Content\n            className=\"bottom-text\"\n            tagName=\"p\"\n            value={bottomTxt}\n            style={{\n              color: bottomTxtColor,\n              fontSize: bottomTxtFontSize + \"px\",\n              fontFamily: bottomTxtFF,\n            }}\n          />\n        </div>\n      </div>\n    );\n  },\n});\n","import { registerBlockType } from \"@wordpress/blocks\";\nimport { InnerBlocks, InspectorControls } from \"@wordpress/block-editor\";\nimport { PanelBody, RangeControl } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\n\nregisterBlockType(\"zita-blocks/pricing-table-section\", {\n  title: __(\"Pricing Table\", \"zita-blocks\"),\n  icon: \"table-col-before\",\n  // description: \"Pricing Table\",\n  category: \"zita-category\",\n  supports: {\n    align: [\"center\", \"left\", \"right\", \"wide\", \"full\"],\n  },\n  getEditWrapperProps(attributes) {\n    // return { \"data-align\": \"wide\" };\n  },\n  attributes: {\n    align: {\n      type: \"string\",\n      default: \"wide\",\n    },\n    columns: {\n      type: \"number\",\n      default: 2,\n    },\n    fullWidth: {\n      type: \"string\",\n      default: \"\",\n    },\n  },\n  edit: (props) => {\n    // console.log(props);\n\n    const { className, attributes, setAttributes } = props;\n    const { columns, fullWidth } = attributes;\n    const MY_TEMPLATE = [\n      [\"zita-blocks/pricing-table-table\"],\n      [\n        \"zita-blocks/pricing-table-table\",\n        {\n          headingTxt: \"Advance\",\n          priceMonth: \"159\",\n          middleTxt:\n            \"<p>Email Marketing</p><p>Email Builder</p><p>Client Testing</p><p>10 User Free</p><p>Multiple Email Support</p>\",\n        },\n      ],\n    ];\n\n    return [\n      <InspectorControls>\n        <PanelBody>\n          <RangeControl\n            label={__(\"Number Of Column\", \"zita-blocks\")}\n            value={columns}\n            onChange={(v) => {\n              setAttributes({ columns: v });\n            }}\n            min={1}\n            max={4}\n          />\n          <p>\n            <strong>{__(\"Column Layout\", \"zita-blocks\")}</strong>\n          </p>\n          <div className=\"column-layout-num-column\">\n            <div>\n              <input\n                type=\"radio\"\n                value=\"box\"\n                name=\"column-layout\"\n                id=\"column-layout-box\"\n                onChange={() => setAttributes({ fullWidth: \"\" })}\n              />\n              <label for=\"column-layout-box\">\n                <img src={plugin_url.url + \"assets/img/box-layout.png\"} />\n              </label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                value=\"full\"\n                name=\"column-layout\"\n                id=\"column-layout-full\"\n                onChange={() => setAttributes({ fullWidth: \"full-width\" })}\n              />\n              <label for=\"column-layout-full\">\n                <img src={plugin_url.url + \"assets/img/100percent.png\"} />\n              </label>\n            </div>\n          </div>\n        </PanelBody>\n      </InspectorControls>,\n      <div className={`${className} ${fullWidth} column-count-${columns} `}>\n        <InnerBlocks\n          template={MY_TEMPLATE}\n          allowedBlocks={[\"zita-blocks/pricing-table-table\"]}\n        />\n      </div>,\n    ];\n  },\n  save: (props) => {\n    // const { attributes } = props;\n    const { columns, fullWidth } = props.attributes;\n    // console.log(columns);\n    return (\n      <div className={`${fullWidth} column-count-${columns} `}>\n        <InnerBlocks.Content />\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\n// import fontFamily from \"../block-assets/font-family\";\n\n// import icons_ from \"../block-assets/icons\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  InspectorControls,\n  ColorPalette,\n  RichText,\n} from \"@wordpress/block-editor\";\nimport { PanelBody, RangeControl, ToggleControl } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nconst attrs_ = {\n  circleRadius: { type: \"number\", default: 80 },\n  strokeWidth: { type: \"number\", default: 15 },\n  strokeColor: { type: \"string\", default: \"blue\" },\n  strokeBgColor: { type: \"string\", default: \"grey\" },\n  fillBgColor: { type: \"string\", default: \"pink\" },\n  animationDelay: { type: \"number\", default: 10 },\n  lineCap: { type: \"boolean\", default: false },\n  alignment: { type: \"string\", default: \"center\" },\n  text: { type: \"number\", default: 50 },\n  textFs: { type: \"number\", default: 18 },\n  textColor: { type: \"string\", default: \"black\" },\n  percentTitleE: { type: \"boolean\", default: true },\n  percentTitle: { type: \"string\", default: __(\"Add Title\", \"zita-blocks\") },\n  percentTitleFs: { type: \"number\" },\n  percentTitleColor: { type: \"string\" },\n};\nregisterBlockType(\"zita-blocks/progress-bar-pie\", {\n  title: __(\"Circular Progress Bar\", \"zita-blocks\"),\n  icon: (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      enable-background=\"new 0 0 24 24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"black\"\n      width=\"18px\"\n      height=\"18px\"\n    >\n      <g>\n        <rect fill=\"none\" height=\"24\" width=\"24\" />\n        <path d=\"M15.5,13.5c0,2-2.5,3.5-2.5,5h-2c0-1.5-2.5-3-2.5-5c0-1.93,1.57-3.5,3.5-3.5h0C13.93,10,15.5,11.57,15.5,13.5z M13,19.5h-2 V21h2V19.5z M19,13c0,1.68-0.59,3.21-1.58,4.42l1.42,1.42C20.18,17.27,21,15.23,21,13c0-2.74-1.23-5.19-3.16-6.84l-1.42,1.42 C17.99,8.86,19,10.82,19,13z M16,5l-4-4v3c0,0,0,0,0,0c-4.97,0-9,4.03-9,9c0,2.23,0.82,4.27,2.16,5.84l1.42-1.42 C5.59,16.21,5,14.68,5,13c0-3.86,3.14-7,7-7c0,0,0,0,0,0v3L16,5z\" />\n      </g>\n    </svg>\n  ),\n  // description: \"progress bar.\",\n  category: \"zita-category\",\n  keywords: [\"circular progress\", \"circular progress bar\"],\n  attributes: attrs_,\n  example: () => {},\n  edit: ({ attributes, setAttributes }) => {\n    const {\n      circleRadius,\n      strokeWidth,\n      strokeColor,\n      strokeBgColor,\n      fillBgColor,\n      lineCap,\n      animationDelay,\n      alignment,\n      text,\n      textFs,\n      textColor,\n      percentTitleE,\n      percentTitle,\n      percentTitleColor,\n      percentTitleFs,\n    } = attributes;\n    let HW = circleRadius * 2 + strokeWidth;\n    let cxCy = HW / 2;\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Circle Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <RangeControl\n            label={__(\"Percent\", \"zita-blocks\")}\n            value={text}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ text: e })}\n          />\n          <RangeControl\n            label={__(\"Width\", \"zita-blocks\")}\n            value={circleRadius}\n            min={1}\n            max={150}\n            onChange={(e) => setAttributes({ circleRadius: e })}\n          />\n          <RangeControl\n            label={__(\"Stroke Width\", \"zita-blocks\")}\n            value={strokeWidth}\n            min={1}\n            max={150}\n            onChange={(e) => setAttributes({ strokeWidth: e })}\n          />\n          <RangeControl\n            label={__(\"Animation Delay\", \"zita-blocks\")}\n            value={animationDelay}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ animationDelay: e })}\n          />\n          <p>\n            <strong>{__(\"Stroke Edges Type\", \"zita-blocks\")}</strong>\n          </p>\n          <ToggleControl\n            label={\n              lineCap\n                ? __(\"Flat\", \"zita-blocks\")\n                : __(\"Circular\", \"zita-blocks\")\n            }\n            checked={lineCap}\n            onChange={(e) => setAttributes({ lineCap: e })}\n          />\n          <p>\n            <strong>{__(\"Stroke Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={strokeColor}\n            onChange={(color) => setAttributes({ strokeColor: color })}\n          />\n          <p>\n            <strong>{__(\"Stroke Background Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={strokeBgColor}\n            onChange={(color) => setAttributes({ strokeBgColor: color })}\n          />\n          <p>\n            <strong>{__(\"Fill Background Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={fillBgColor}\n            onChange={(color) => setAttributes({ fillBgColor: color })}\n          />\n        </PanelBody>\n        <PanelBody\n          title={__(\"Text Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <p className=\"block-inside\">{__(\"Title Setting\", \"zita-blocks\")}</p>\n          <ToggleControl\n            label={\n              percentTitleE\n                ? __(\"Hide\", \"zita-blocks\")\n                : __(\"Show\", \"zita-blocks\")\n            }\n            checked={percentTitleE}\n            onChange={(e) => setAttributes({ percentTitleE: e })}\n          />\n          {percentTitleE && (\n            <>\n              <RangeControl\n                label={__(\"Font Size\", \"zita-blocks\")}\n                value={percentTitleFs}\n                min={1}\n                max={50}\n                onChange={(e) => setAttributes({ percentTitleFs: e })}\n              />\n              <p>\n                <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n              </p>\n              <ColorPalette\n                value={percentTitleColor}\n                onChange={(color) =>\n                  setAttributes({ percentTitleColor: color })\n                }\n              />\n            </>\n          )}\n          <p className=\"block-inside\">{__(\"Percent Setting\", \"zita-blocks\")}</p>\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={textFs}\n            min={1}\n            max={50}\n            onChange={(e) => setAttributes({ textFs: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={textColor}\n            onChange={(color) => setAttributes({ textColor: color })}\n          />\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"thk-progress-bar-wrapper-pie\">\n        <div className=\"zita-block-pie-circle\">\n          <div className=\"pie-circle_\">\n            <div className=\"text-sction\">\n              {percentTitleE && (\n                <RichText\n                  className=\"title_\"\n                  key=\"editable\"\n                  tagName=\"span\"\n                  placeholder={__(\"Add Title\", \"zita-blocks\")}\n                  value={percentTitle}\n                  onChange={(e) => setAttributes({ percentTitle: e })}\n                  style={{\n                    color: percentTitleColor,\n                    fontSize: percentTitleFs + \"px\",\n                  }}\n                />\n              )}\n              <span\n                className=\"percent_\"\n                style={{ fontSize: textFs + \"px\", color: textColor }}\n              >\n                {text}%\n              </span>\n            </div>\n            <svg height={HW} width={HW}>\n              <circle cx={cxCy} cy={cxCy} r={circleRadius} fill={fillBgColor} />\n              <circle\n                cx={cxCy}\n                cy={cxCy}\n                r={circleRadius}\n                fill=\"none\"\n                stroke-width={strokeWidth}\n                stroke={strokeBgColor}\n              />\n              <circle\n                r={circleRadius}\n                cx={cxCy}\n                cy={cxCy}\n                stroke-width={strokeWidth}\n                fill=\"none\"\n                stroke={strokeColor}\n                stroke-linecap={lineCap ? \"round\" : \"flat\"}\n                stroke-dasharray={`${\n                  text * ((Math.PI * (circleRadius * 2)) / 100)\n                } ${Math.PI * (circleRadius * 2)}`}\n              />\n            </svg>\n          </div>\n        </div>\n      </div>,\n    ];\n  },\n  save: ({ attributes }) => {\n    const {\n      circleRadius,\n      strokeWidth,\n      strokeColor,\n      strokeBgColor,\n      fillBgColor,\n      animationDelay,\n      lineCap,\n      alignment,\n      text,\n      textFs,\n      textColor,\n      percentTitleE,\n      percentTitle,\n      percentTitleColor,\n      percentTitleFs,\n    } = attributes;\n    let circleData = {\n      radius: circleRadius,\n      strokeWidth: strokeWidth,\n      strokeColor: strokeColor,\n      strokeBgColor: strokeBgColor,\n      lineCap: lineCap,\n      animationDelay: animationDelay,\n      text: text,\n    };\n    circleData = JSON.stringify(circleData);\n    let HW = circleRadius * 2 + strokeWidth;\n    let cxCy = HW / 2;\n    return (\n      <div className=\"thk-progress-bar-wrapper-pie\">\n        <div className=\"zita-block-pie-circle front_\">\n          <div className=\"pie-circle_\">\n            <div className=\"text-sction\">\n              {percentTitleE && (\n                <RichText.Content\n                  className=\"title_\"\n                  tagName=\"span\"\n                  value={percentTitle}\n                  style={{\n                    color: percentTitleColor,\n                    fontSize: percentTitleFs + \"px\",\n                  }}\n                />\n              )}\n              <span\n                className=\"percent_\"\n                style={{ fontSize: textFs + \"px\", color: textColor }}\n              ></span>\n            </div>\n\n            <svg height={HW} width={HW} data={circleData}>\n              <circle cx={cxCy} cy={cxCy} r={circleRadius} fill={fillBgColor} />\n              <circle\n                cx={cxCy}\n                cy={cxCy}\n                r={circleRadius}\n                fill=\"none\"\n                stroke-width={strokeWidth}\n                stroke={strokeBgColor}\n              />\n              <circle\n                className=\"percent-apply\"\n                r={circleRadius}\n                cx={cxCy}\n                cy={cxCy}\n                fill=\"none\"\n                stroke-linecap={lineCap ? \"round\" : \"flat\"}\n              />\n            </svg>\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n} from \"@wordpress/block-editor\";\nimport { PanelBody, RangeControl, ToggleControl } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nconst attrs_ = {\n  percentTitle: { type: \"string\", default: __(\"Percent title\", \"zita-blocks\") },\n  titleFs: { type: \"number\" },\n  titleFf: { type: \"string\" },\n  titleIn: { type: \"boolean\", default: false },\n  titleColor: { type: \"string\" },\n  progressHeight: { type: \"number\", default: 12 },\n  percent: { type: \"number\", default: 40 },\n  animationDelay: { type: \"number\", default: 10 },\n  percentColor: { type: \"string\", default: \"yellow\" },\n  percentBgColor: { type: \"string\" },\n  borderRadius: { type: \"number\" },\n};\nregisterBlockType(\"zita-blocks/progress-block\", {\n  title: __(\"Linear Progress Bar\", \"zita-blocks\"),\n  icon: \"update\",\n  // description: \"progress bar.\",\n  category: \"zita-category\",\n  keywords: [\"progress\", \"progress bar\"],\n  attributes: attrs_,\n  example: () => {},\n  edit: ({ attributes, setAttributes }) => {\n    const {\n      percent,\n      progressHeight,\n      percentTitle,\n      titleIn,\n      titleFs,\n      titleFf,\n      animationDelay,\n      titleColor,\n      percentColor,\n      percentBgColor,\n      borderRadius,\n    } = attributes;\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Title Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <ToggleControl\n            label={\n              titleIn\n                ? __(\"Outside\", \"zita-blocks\")\n                : __(\"Inside\", \"zita-blocks\")\n            }\n            checked={titleIn}\n            onChange={(e) => setAttributes({ titleIn: e })}\n          />\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={titleFs}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ titleFs: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={titleColor}\n            onChange={(color) => setAttributes({ titleColor: color })}\n          />\n        </PanelBody>\n        <PanelBody\n          title={__(\"Progress Bar Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <RangeControl\n            label={__(\"Height\", \"zita-blocks\")}\n            value={progressHeight}\n            min={1}\n            max={50}\n            onChange={(e) => setAttributes({ progressHeight: e })}\n          />\n          <RangeControl\n            label={__(\"Percent\", \"zita-blocks\")}\n            value={percent}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ percent: e })}\n          />\n\n          <RangeControl\n            label={__(\"Border Radius\", \"zita-blocks\")}\n            value={borderRadius}\n            min={1}\n            max={60}\n            onChange={(e) => setAttributes({ borderRadius: e })}\n          />\n          <RangeControl\n            label={__(\"Animation Delay\", \"zita-blocks\")}\n            value={animationDelay}\n            min={1}\n            max={100}\n            onChange={(e) => setAttributes({ animationDelay: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={percentColor}\n            onChange={(color) => setAttributes({ percentColor: color })}\n          />\n          <p>\n            <strong>{__(\"Background Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={percentBgColor}\n            onChange={(color) => setAttributes({ percentBgColor: color })}\n          />\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"thk-progress-bar-wrapper\">\n        <div className=\"zita-linear-progress-bar\">\n          <div\n            className=\"txt-section\"\n            style={{ fontSize: titleFs, color: titleColor }}\n          >\n            <RichText\n              value={percentTitle}\n              tagName=\"p\"\n              onChange={(e) => setAttributes({ percentTitle: e })}\n            />\n            {!titleIn && <span className=\"percent_\">{percent}%</span>}\n          </div>\n          <div\n            style={{\n              backgroundColor: percentBgColor,\n              height: progressHeight + \"px\",\n              borderRadius: borderRadius + \"px\",\n            }}\n            className=\"line_\"\n          >\n            <div\n              style={{ width: percent + \"%\", backgroundColor: percentColor }}\n              className=\"line-inner_\"\n            >\n              {titleIn && <span className=\"percent_\">{percent}%</span>}\n            </div>\n          </div>\n        </div>\n      </div>,\n    ];\n  },\n  save: ({ attributes }) => {\n    const {\n      progressHeight,\n      percent,\n      percentTitle,\n      titleIn,\n      titleFs,\n      titleFf,\n      titleColor,\n      percentColor,\n      percentBgColor,\n      borderRadius,\n      animationDelay,\n    } = attributes;\n    return (\n      <div className=\"thk-progress-bar-wrapper\">\n        <div\n          className=\"zita-linear-progress-bar front_\"\n          percent={percent}\n          delay={animationDelay}\n        >\n          <div\n            className=\"txt-section\"\n            style={{ fontSize: titleFs, color: titleColor }}\n          >\n            <RichText.Content value={percentTitle} tagName=\"p\" />\n            {!titleIn && <span className=\"percent_\"></span>}\n          </div>\n          <div\n            style={{\n              backgroundColor: percentBgColor,\n              height: progressHeight + \"px\",\n              borderRadius: borderRadius + \"px\",\n            }}\n            className=\"line_\"\n          >\n            <div\n              style={{ backgroundColor: percentColor }}\n              className=\"line-inner_\"\n            >\n              {titleIn && <span className=\"percent_\"></span>}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","import \"./parent\";\nimport icons_ from \"../block-assets/icons\";\nimport \"./editor.scss\";\nimport fontFamily from \"../block-assets/font-family\";\n\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n  MediaUpload,\n} from \"@wordpress/block-editor\";\nimport { useState, useRef, useEffect } from \"@wordpress/element\";\nimport {\n  PanelBody,\n  IconButton,\n  RangeControl,\n  ToggleControl,\n  ColorPicker,\n} from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\n\nconst attrSave = {\n  image: {\n    type: \"string\",\n    default: \"icon\",\n  },\n  imageWidth: {\n    type: \"number\",\n    default: 30,\n  },\n  imageUrl: {\n    type: \"string\",\n    default: plugin_url.url + \"assets/img/image2.jpg\",\n  },\n  imageBorderRadius: {\n    type: \"number\",\n    default: 0,\n  },\n  imagePadding: {\n    type: \"number\",\n    default: 0,\n  },\n  title: {\n    type: \"string\",\n    default: __(\"Add Title\", \"zita-blocks\"),\n  },\n  titleFontSize: {\n    type: \"number\",\n    default: \"21\",\n  },\n  titleColor: {\n    type: \"string\",\n    default: \"#ffa600\",\n  },\n  titleFF: {\n    type: \"string\",\n  },\n  description: {\n    type: \"string\",\n    default: __(\"Add Service Description\", \"zita-blocks\"),\n  },\n  descriptionFontSize: {\n    type: \"number\",\n    default: \"21\",\n  },\n  descriptionColor: {\n    type: \"string\",\n  },\n  descriptionFF: {\n    type: \"string\",\n    default: \"Arimo\",\n  },\n  containerBgColor: {\n    type: \"string\",\n    default: \"#EEF6F9\",\n  },\n\n  containerBorder: {\n    type: \"boolean\",\n    default: false,\n  },\n  containerBorderWidth: {\n    type: \"number\",\n    default: 2,\n  },\n  containerBorderRadius: {\n    type: \"number\",\n    default: 3,\n  },\n  containerBorderColor: {\n    type: \"string\",\n    default: \"black\",\n  },\n  containerSpace: { type: \"number\", default: 0 },\n  //   icon\n  iconClass: {\n    type: \"string\",\n    default: \"fas fa-coffee\",\n  },\n  iconFontsize: {\n    type: \"number\",\n    default: \"40\",\n  },\n  iconColor: {\n    type: \"string\",\n    default: \"#ffa600\",\n  },\n  iconBgColor: {\n    type: \"string\",\n  },\n  iconBorder: {\n    type: \"boolean\",\n    default: true,\n  },\n  iconBorderWidth: {\n    type: \"number\",\n    default: 2,\n  },\n  iconBorderRadius: {\n    type: \"number\",\n    default: 50,\n  },\n  iconBorderColor: {\n    type: \"string\",\n    default: \"#ffa600\",\n  },\n  iconSpace: {\n    type: \"number\",\n    default: 79,\n  },\n};\nregisterBlockType(\"zita-blocks/icon-image-content\", {\n  title: __(\"icon Image content\", \"zita-blocks\"),\n  icon: \"editor-insertmore\",\n  category: \"zita-category\",\n  parent: [\"zita-blocks/block-column-parent\"],\n  getEditWrapperProps(attributes) {},\n  keywords: [\"service\", \"service-section\"],\n  attributes: attrSave,\n  // example: () => {},\n  edit: (props) => {\n    const { attributes, setAttributes } = props;\n    const {\n      image,\n      imageWidth,\n      imageUrl,\n      imagePadding,\n      imageBorderRadius,\n      title,\n      titleFontSize,\n      titleColor,\n      titleFF,\n      description,\n      descriptionFF,\n      descriptionFontSize,\n      descriptionColor,\n      containerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n      containerSpace,\n      //icon\n      iconFontsize,\n      iconClass,\n      iconColor,\n      iconBgColor,\n      iconBorder,\n      iconBorderWidth,\n      iconBorderRadius,\n      iconBorderColor,\n      iconSpace,\n    } = attributes;\n\n    //icon border\n    let borderStyle = iconBorder\n      ? {\n          borderWidth: iconBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorderColor,\n          borderRadius: iconBorderRadius + \"%\",\n          width: iconSpace + \"px\",\n          height: iconSpace + \"px\",\n        }\n      : {};\n    borderStyle = { ...borderStyle, ...{ backgroundColor: iconBgColor } };\n    //icon border\n\n    const imageStyle = {\n      width: imageWidth + \"%\",\n      borderRadius: imageBorderRadius + \"px\",\n      padding: imagePadding + \"px\",\n    };\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    containerBorderStyle = containerBgColor\n      ? {\n          ...containerBorderStyle,\n          ...{\n            backgroundColor: containerBgColor,\n            paddingTop: containerSpace + \"px\",\n            paddingBottom: containerSpace + \"px\",\n          },\n        }\n      : containerBorderStyle;\n    const [activeIconContainer, activeIconContainerSet] = useState(false);\n    const [iconList, setIconList] = useState(icons_);\n    let iconReff = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!iconReff.current.contains(event.target)) {\n          activeIconContainerSet(false);\n        }\n      };\n\n      if (activeIconContainer) document.addEventListener(\"mousedown\", handler);\n      return () => {\n        document.removeEventListener(\"mousedown\", handler);\n      };\n    });\n\n    const [activeFamilyContainer, activeFamilyDrop] = useState(false);\n    let familyRef = useRef();\n    useEffect(() => {\n      let handler = (event) => {\n        if (!familyRef.current.contains(event.target)) {\n          activeFamilyDrop(false);\n        }\n      };\n\n      if (activeFamilyContainer) document.addEventListener(\"mouseup\", handler);\n      return () => {\n        document.removeEventListener(\"mouseup\", handler);\n      };\n    });\n\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Image and Icon Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <p>\n            <strong>{__(\"Choose Image Or Icon\", \"zita-blocks\")} </strong>\n          </p>\n          <ToggleControl\n            label={\n              image == \"image\"\n                ? __(\"Icon\", \"zita-blocks\")\n                : __(\"Image\", \"zita-blocks\")\n            }\n            checked={image == \"image\" ? true : false}\n            onChange={(e) => {\n              setAttributes({ image: e ? \"image\" : \"icon\" });\n            }}\n          />\n          {image == \"image\" && (\n            <div className=\"service-image-setting\">\n              <MediaUpload\n                label={__(\"Choose Image\", \"zita-blocks\")}\n                onSelect={(e) => {\n                  setAttributes({ imageUrl: e.sizes.full.url });\n                }}\n                value={imageUrl}\n                render={({ open }) => (\n                  <IconButton\n                    onClick={open}\n                    icon=\"upload\"\n                    className=\"service-image-uploader editor-media-placeholder__button is-button is-default is-large\"\n                  >\n                    {__(\"Open Media Library\", \"zita-blocks\")}\n                  </IconButton>\n                )}\n              />\n              <RangeControl\n                label={__(\"Width\", \"zita-blocks\")}\n                value={imageWidth}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ imageWidth: e })}\n              />\n              <RangeControl\n                label={__(\"Padding\", \"zita-blocks\")}\n                value={imagePadding}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ imagePadding: e })}\n              />\n              <RangeControl\n                label={__(\"Border Radius\", \"zita-blocks\")}\n                value={imageBorderRadius}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ imageBorderRadius: e })}\n              />\n            </div>\n          )}\n          {image == \"icon\" && (\n            <div className=\"service-icon-setting\">\n              <p>\n                <strong>{__(\"Choose Icon\", \"zita-blocks\")}</strong>\n              </p>\n\n              <div\n                ref={iconReff}\n                className={`wpgt-radio-wrap ${\n                  activeIconContainer ? \"active\" : \"\"\n                }`}\n              >\n                <div\n                  className=\"selected-icon\"\n                  onClick={(e) => {\n                    // let set__container = !activeIconContainer;\n                    activeIconContainerSet(true);\n                  }}\n                >\n                  <i className={iconClass}></i>\n                  <div className=\"search-container\">\n                    <i className=\"fas fa-search\"></i>\n                    <input\n                      type=\"text\"\n                      onChange={(e) => {\n                        let value_ = e.target.value;\n                        if (value_ != \"\") {\n                          let newAr = icons_.filter(\n                            (checkStr) => checkStr.search(value_) != -1\n                          );\n                          if (newAr.length) {\n                            setIconList(newAr);\n                          }\n                        } else {\n                          setIconList(icons_);\n                        }\n                      }}\n                    />\n                  </div>\n                </div>\n                <div\n                  className=\"wpgt-radio-container\"\n                  onChange={(e) => {\n                    setAttributes({ iconClass: e.target.value });\n                  }}\n                >\n                  {iconList.map((iconValue) => {\n                    return (\n                      <div className=\"wpgt-radio-wrapper\">\n                        <input\n                          id={\"wpgt-Radio-\" + iconValue}\n                          type=\"radio\"\n                          name=\"wpgt-choose-icon\"\n                          className=\"radio-input\"\n                          value={iconValue}\n                        />\n                        <label htmlFor={\"wpgt-Radio-\" + iconValue}>\n                          <i className={iconValue}></i>\n                        </label>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n              <p>\n                <strong>{__(\"Font Size\", \"zita-blocks\")}</strong>\n              </p>\n              <RangeControl\n                value={iconFontsize}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ iconFontsize: e })}\n              />\n              <p>\n                <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n              </p>\n              <ColorPalette\n                onChange={(color) => setAttributes({ iconColor: color })}\n              />\n              <p>\n                <strong>{__(\"Background Color\", \"zita-blocks\")}</strong>\n              </p>\n              <ColorPicker\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  setAttributes({ iconBgColor: color });\n                }}\n              />\n              <ToggleControl\n                label={\n                  iconBorder\n                    ? __(\"Disable\", \"zita-blocks\")\n                    : __(\"Enable\", \"zita-blocks\")\n                }\n                checked={iconBorder}\n                onChange={(e) => setAttributes({ iconBorder: e })}\n              />\n              {iconBorder && (\n                <div className=\"icon-border-setting\">\n                  <RangeControl\n                    label={__(\"Border Width\", \"zita-blocks\")}\n                    value={iconBorderWidth}\n                    min={0}\n                    max={100}\n                    onChange={(e) => setAttributes({ iconBorderWidth: e })}\n                  />\n                  <RangeControl\n                    label={__(\"Border Radius\", \"zita-blocks\")}\n                    value={iconBorderRadius}\n                    min={0}\n                    max={50}\n                    onChange={(e) => setAttributes({ iconBorderRadius: e })}\n                  />\n                  <p>{__(\"Border Color\", \"zita-blocks\")}</p>\n                  <ColorPalette\n                    onChange={(color) =>\n                      setAttributes({ iconBorderColor: color })\n                    }\n                  />\n                  <RangeControl\n                    label={__(\"Icon Space\", \"zita-blocks\")}\n                    value={iconSpace}\n                    min={0}\n                    max={200}\n                    onChange={(e) => setAttributes({ iconSpace: e })}\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </PanelBody>\n\n        <PanelBody\n          title={__(\"Title Settings\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={titleFontSize}\n            min={0}\n            max={100}\n            onChange={(e) => setAttributes({ titleFontSize: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"zita-blocks\")} </strong>\n          </p>\n          <ColorPalette\n            value={titleColor}\n            onChange={(e) => setAttributes({ titleColor: e })}\n          />\n          {/* font family */}\n          <div className=\"THK-font-family-wrapper\">\n            <p>\n              <strong>{__(\"Font Family\", \"zita-blocks\")}</strong>\n            </p>\n            <div\n              ref={familyRef}\n              className={`font-family-drop-down ${\n                activeFamilyContainer ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                onClick={() => {\n                  let applyActive = !activeFamilyContainer;\n                  activeFamilyDrop(applyActive);\n                }}\n                className=\"font-family-show\"\n              >\n                <span style={{ fontFamily: titleFF }}>\n                  {titleFF ? titleFF : __(\"Choose Family\", \"zita-blocks\")}\n                </span>\n              </div>\n              <div className=\"family-items\">\n                {fontFamily.map((family, key_) => {\n                  return (\n                    <span\n                      onClick={() => setAttributes({ titleFF: family })}\n                      style={{ fontFamily: family }}\n                    >\n                      {family}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          {/* font family */}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Description Settings\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <RangeControl\n            label={__(\"Font Size\", \"zita-blocks\")}\n            value={descriptionFontSize}\n            min={0}\n            max={100}\n            onChange={(e) => setAttributes({ descriptionFontSize: e })}\n          />\n          <p>\n            <strong>{__(\"Color\", \"zita-blocks\")} </strong>\n          </p>\n          <ColorPalette\n            value={descriptionColor}\n            onChange={(e) => setAttributes({ descriptionColor: e })}\n          />\n          {/* font family */}\n          <div className=\"THK-font-family-wrapper\">\n            <p>\n              <strong>{__(\"Font Family\", \"zita-blocks\")}</strong>\n            </p>\n            <div\n              ref={familyRef}\n              className={`font-family-drop-down ${\n                activeFamilyContainer ? \"active\" : \"\"\n              }`}\n            >\n              <div\n                onClick={() => {\n                  let applyActive = !activeFamilyContainer;\n                  activeFamilyDrop(applyActive);\n                }}\n                className=\"font-family-show\"\n              >\n                <span style={{ fontFamily: descriptionFF }}>\n                  {descriptionFF\n                    ? descriptionFF\n                    : __(\"Choose Family\", \"zita-blocks\")}\n                </span>\n              </div>\n              <div className=\"family-items\">\n                {fontFamily.map((family, key_) => {\n                  return (\n                    <span\n                      onClick={() => setAttributes({ descriptionFF: family })}\n                      style={{ fontFamily: family }}\n                    >\n                      {family}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          {/* font family */}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Container Settings\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <ColorPicker\n            onChangeComplete={(colorBg) => {\n              let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n              setAttributes({ containerBgColor: color });\n            }}\n          />\n          <RangeControl\n            label={__(\"Container Space\", \"zita-blocks\")}\n            value={containerSpace}\n            min={0}\n            max={100}\n            onChange={(e) => setAttributes({ containerSpace: e })}\n          />\n          <p>\n            <strong>{__(\"Border\", \"zita-blocks\")}</strong>\n          </p>\n          <ToggleControl\n            label={\n              containerBorder\n                ? __(\"Disable\", \"zita-blocks\")\n                : __(\"Enable\", \"zita-blocks\")\n            }\n            checked={containerBorder}\n            onChange={(e) => setAttributes({ containerBorder: e })}\n          />\n          {containerBorder && (\n            <div className=\"icon-border-setting\">\n              <RangeControl\n                label={__(\"Border Width\", \"zita-blocks\")}\n                value={containerBorderWidth}\n                min={0}\n                max={100}\n                onChange={(e) => setAttributes({ containerBorderWidth: e })}\n              />\n              <RangeControl\n                label={__(\"Border Radius\", \"zita-blocks\")}\n                value={containerBorderRadius}\n                min={0}\n                max={50}\n                onChange={(e) => setAttributes({ containerBorderRadius: e })}\n              />\n              <p>{__(\"Border Color\", \"zita-blocks\")}</p>\n              <ColorPalette\n                onChange={(color) =>\n                  setAttributes({ containerBorderColor: color })\n                }\n              />\n            </div>\n          )}\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"service-section-wrapper\" style={containerBorderStyle}>\n        <div className={`service-image-icon ${image == \"icon\" ? \"icon_\" : \"\"}`}>\n          {image == \"image\" && (\n            <div className=\"service-image-section\">\n              <img style={imageStyle} src={imageUrl} />\n            </div>\n          )}\n          {image == \"icon\" && (\n            <div className=\"icon-container\" style={borderStyle}>\n              <i\n                style={{\n                  color: iconColor,\n                  fontSize: iconFontsize + \"px\",\n                }}\n                className={iconClass}\n              ></i>\n            </div>\n          )}\n        </div>\n        <div className=\"service-title-description\">\n          <div>\n            <RichText\n              key=\"editable\"\n              tagName=\"h1\"\n              placeholder={__(\"Service Title\", \"zita-blocks\")}\n              value={__(title, \"zita-blocks\")}\n              onChange={(e) => setAttributes({ title: e })}\n              style={{\n                color: titleColor,\n                fontSize: titleFontSize + \"px\",\n                fontFamily: titleFF,\n              }}\n            />\n            <RichText\n              key=\"editable\"\n              tagName=\"p\"\n              placeholder={__(\"Service Description\", \"zita-blocks\")}\n              value={description}\n              onChange={(e) => setAttributes({ description: e })}\n              style={{\n                color: descriptionColor,\n                fontSize: descriptionFontSize + \"px\",\n                fontFamily: descriptionFF,\n              }}\n            />\n          </div>\n        </div>\n      </div>,\n    ];\n  },\n  save: (props) => {\n    const { attributes } = props;\n    const {\n      image,\n      imageWidth,\n      imageUrl,\n      imagePadding,\n      imageBorderRadius,\n      title,\n      titleFontSize,\n      titleColor,\n      description,\n      descriptionFontSize,\n      descriptionColor,\n      containerBgColor,\n      containerBorder,\n      containerBorderWidth,\n      containerBorderRadius,\n      containerBorderColor,\n      containerSpace,\n      //icon\n      iconFontsize,\n      iconClass,\n      iconColor,\n      iconBgColor,\n      iconBorder,\n      iconBorderWidth,\n      iconBorderRadius,\n      iconBorderColor,\n      iconSpace,\n    } = attributes;\n    //icon border\n    let borderStyle = iconBorder\n      ? {\n          borderWidth: iconBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: iconBorderColor,\n          borderRadius: iconBorderRadius + \"%\",\n          width: iconSpace + \"px\",\n          height: iconSpace + \"px\",\n        }\n      : {};\n    borderStyle = {\n      ...borderStyle,\n      ...{ backgroundColor: iconBgColor },\n    };\n    //icon border\n\n    const imageStyle = {\n      width: imageWidth + \"%\",\n      borderRadius: imageBorderRadius + \"px\",\n      padding: imagePadding + \"px\",\n    };\n    let containerBorderStyle = containerBorder\n      ? {\n          borderWidth: containerBorderWidth + \"px\",\n          borderStyle: \"solid\",\n          borderColor: containerBorderColor,\n          borderRadius: containerBorderRadius + \"px\",\n        }\n      : {};\n    containerBorderStyle = containerBgColor\n      ? {\n          ...containerBorderStyle,\n          ...{\n            backgroundColor: containerBgColor,\n            paddingTop: containerSpace + \"px\",\n            paddingBottom: containerSpace + \"px\",\n          },\n        }\n      : containerBorderStyle;\n\n    return (\n      <div className=\"service-section-wrapper\" style={containerBorderStyle}>\n        <div className={`service-image-icon ${image == \"icon\" ? \"icon_\" : \"\"}`}>\n          {image == \"image\" && (\n            <div className=\"service-image-section\">\n              <img style={imageStyle} src={imageUrl} />\n            </div>\n          )}\n          {image == \"icon\" && (\n            <div className=\"icon-container\" style={borderStyle}>\n              <i\n                style={{\n                  color: iconColor,\n                  fontSize: iconFontsize + \"px\",\n                }}\n                className={iconClass}\n              ></i>\n            </div>\n          )}\n        </div>\n        <div className=\"service-title-description\">\n          <div>\n            <RichText.Content\n              tagName=\"h1\"\n              value={__(title, \"zita-blocks\")}\n              style={{ color: titleColor, fontSize: titleFontSize + \"px\" }}\n            />\n            <RichText.Content\n              tagName=\"p\"\n              value={__(description, \"zita-blocks\")}\n              style={{\n                color: descriptionColor,\n                fontSize: descriptionFontSize + \"px\",\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  },\n});\n","import { registerBlockType } from \"@wordpress/blocks\";\nimport { InnerBlocks, InspectorControls } from \"@wordpress/block-editor\";\nimport { PanelBody, RangeControl } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\n\nregisterBlockType(\"zita-blocks/block-column-parent\", {\n  title: __(\"Service Section\", \"zita-blocks\"),\n  icon: \"grid-view\",\n  // description: \"Parent Of all Column Member\",\n  category: \"zita-category\",\n  supports: {\n    align: [\"center\", \"left\", \"right\", \"wide\", \"full\"],\n  },\n  attributes: {\n    align: {\n      type: \"string\",\n      default: \"wide\",\n    },\n    columns: {\n      type: \"number\",\n      default: 2,\n    },\n    fullWidth: {\n      type: \"string\",\n      default: \"\",\n    },\n  },\n  // example: () => {},\n  edit: (props) => {\n    const { className, attributes, setAttributes } = props;\n    const { columns, fullWidth } = attributes;\n    const MY_TEMPLATE = [\n      [\"zita-blocks/icon-image-content\"],\n      [\"zita-blocks/icon-image-content\"],\n    ];\n    return [\n      <InspectorControls>\n        <PanelBody>\n          <RangeControl\n            label={__(\"Number Of Column\", \"zita-blocks\")}\n            value={columns}\n            onChange={(v) => setAttributes({ columns: v })}\n            min={1}\n            max={4}\n          />\n          <p>\n            <strong>{__(\"Column Layout\", \"zita-blocks\")}</strong>\n          </p>\n          <div className=\"column-layout-num-column\">\n            <div>\n              <input\n                type=\"radio\"\n                value=\"\"\n                name=\"column-layout\"\n                id=\"column-layout-box\"\n                onChange={() => setAttributes({ fullWidth: \"\" })}\n              />\n              <label for=\"column-layout-box\">\n                <img src={plugin_url.url + \"assets/img/box-layout.png\"} />\n              </label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                value=\"full-width\"\n                name=\"column-layout\"\n                id=\"column-layout-full\"\n                onChange={() => setAttributes({ fullWidth: \"full-width\" })}\n              />\n              <label for=\"column-layout-full\">\n                <img src={plugin_url.url + \"assets/img/100percent.png\"} />\n              </label>\n            </div>\n          </div>\n        </PanelBody>\n      </InspectorControls>,\n      <div className={`${className} ${fullWidth} column-count-${columns} `}>\n        <InnerBlocks\n          template={MY_TEMPLATE}\n          allowedBlocks={[\"zita-blocks/icon-image-content\"]}\n        />\n      </div>,\n    ];\n  },\n  save: (props) => {\n    const { attributes } = props;\n    const { columns, fullWidth } = attributes;\n    return (\n      <div className={`${fullWidth} column-count-${columns} `}>\n        <InnerBlocks.Content />\n      </div>\n    );\n  },\n});\n","import {\n  RichText,\n  InspectorControls,\n  ColorPalette,\n  MediaUpload,\n} from \"@wordpress/block-editor\";\nimport {\n  PanelBody,\n  RangeControl,\n  ColorPicker,\n  ToggleControl,\n} from \"@wordpress/components\";\nimport { Component } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\nlet bgImageWrapper = plugin_url.url + \"assets/img/image2.jpg\";\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedSlide: 0,\n      twoBtn: \"buttoneOne\",\n      trigger: \"linear\",\n    };\n  }\n  addSlide = () => {\n    let defaultArray = {\n      container: {\n        bgImage: bgImageWrapper,\n        overlayColor: \"\",\n        bgSize: \"cover\",\n      },\n      wrapper: {\n        bgcolor: \"\",\n        border: \"\",\n        alignment: \"left\",\n        spacing: \"2\",\n      },\n      title: {\n        text: __(\"This Is Title text\", \"zita-blocks\"),\n        fontSize: 17,\n        color: \"red\",\n      },\n      text: {\n        text: __(\"Add Description\", \"zita-blocks\"),\n        fontSize: 17,\n        color: \"red\",\n      },\n      buttoneOne: {\n        enable: true,\n        text: __(\"Button One\", \"zita-blocks\"),\n        link: \"#\",\n        target: false,\n        fontSize: \"\",\n        color: \"\",\n        backgroundColor: \"\",\n        height: \"\",\n        width: \"\",\n        border: false,\n        borderColor: \"\",\n        borderWidth: \"\",\n        borderRadius: \"\",\n      },\n      buttoneTwo: {\n        enable: true,\n        text: __(\"Button Two\", \"zita-blocks\"),\n        link: \"#\",\n        target: false,\n        fontSize: \"\",\n        color: \"\",\n        backgroundColor: \"\",\n        height: \"\",\n        width: \"\",\n        border: false,\n        borderColor: \"\",\n        borderWidth: \"\",\n        borderRadius: \"\",\n      },\n    };\n    let slides_ = this.props.attributes.slides;\n    this.props.setAttributes({ slides: [...slides_, defaultArray] });\n    this.setState({ selectedSlide: slides_.length });\n  };\n  removeSlide() {\n    let slides_ = this.props.attributes.slides;\n    let removeItem = this.state.selectedSlide;\n    let afterRemove = [\n      ...slides_.slice(0, removeItem),\n      ...slides_.slice(removeItem + 1),\n    ];\n    this.props.setAttributes({ slides: afterRemove });\n    this.setState({\n      selectedSlide: removeItem - 1 >= 0 ? removeItem - 1 : removeItem,\n    });\n  }\n\n  updateSlides = (value, for_, type) => {\n    let slides_ = this.props.attributes.slides;\n    let newSlide = [...slides_];\n    newSlide[this.state.selectedSlide][for_][type] = value;\n    this.props.setAttributes({ slides: newSlide });\n  };\n  updateGlobalSlide = (value, for_, type) => {\n    let sliderSetting = this.props.attributes.sliderSetting;\n    let newSetting = [...sliderSetting];\n    if (type) {\n      newSetting[0][for_][type] = value;\n    } else {\n      newSetting[0][for_] = value;\n    }\n    this.props.setAttributes({ sliderSetting: newSetting });\n  };\n\n  render() {\n    let { slides, sliderSetting } = this.props.attributes;\n    const thisState = this.state;\n    const stateIndex = thisState.selectedSlide;\n    const currentSlide = slides[stateIndex];\n\n    // console.log(slides);\n    // console.log(currentSlide);\n\n    const activeTwoBtnState = thisState.twoBtn;\n    let triggerActive = thisState.trigger;\n    let buttonOneStyle = {\n      fontSize: currentSlide.buttoneOne.fontSize,\n      color: currentSlide.buttoneOne.color,\n      backgroundColor: currentSlide.buttoneOne.backgroundColor,\n      paddingTop: currentSlide.buttoneOne.height,\n      paddingBottom: currentSlide.buttoneOne.height,\n      paddingLeft: currentSlide.buttoneOne.width,\n      paddingRight: currentSlide.buttoneOne.width,\n    };\n    buttonOneStyle = currentSlide.buttoneOne.border\n      ? {\n          ...{\n            borderColor: currentSlide.buttoneOne.borderColor,\n            borderWidth: currentSlide.buttoneOne.borderWidth,\n            borderRadius: currentSlide.buttoneOne.borderRadius,\n            borderStyle: \"solid\",\n          },\n          ...buttonOneStyle,\n        }\n      : buttonOneStyle;\n    let buttonTwoStyle = {\n      fontSize: currentSlide.buttoneTwo.fontSize,\n      color: currentSlide.buttoneTwo.color,\n      backgroundColor: currentSlide.buttoneTwo.backgroundColor,\n      paddingTop: currentSlide.buttoneTwo.height,\n      paddingBottom: currentSlide.buttoneTwo.height,\n      paddingLeft: currentSlide.buttoneTwo.width,\n      paddingRight: currentSlide.buttoneTwo.width,\n    };\n    buttonTwoStyle = currentSlide.buttoneTwo.border\n      ? {\n          ...{\n            borderColor: currentSlide.buttoneTwo.borderColor,\n            borderWidth: currentSlide.buttoneTwo.borderWidth,\n            borderRadius: currentSlide.buttoneTwo.borderRadius,\n            borderStyle: \"solid\",\n          },\n          ...buttonTwoStyle,\n        }\n      : buttonTwoStyle;\n    sliderSetting = sliderSetting[0];\n    let leftRightStyle = {\n      color: sliderSetting.leftRightTrigger.color,\n      backgroundColor: sliderSetting.leftRightTrigger.backgroundColor,\n      fontSize: sliderSetting.leftRightTrigger.fontSize,\n    };\n    let SlideulStyle = null;\n    if (sliderSetting.dimension.height) {\n      SlideulStyle = { minHeight: sliderSetting.dimension.custom_height };\n    }\n    return [\n      <InspectorControls>\n        <PanelBody\n          title={__(\"Slider Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <p className=\"block-inside\">\n            {__(\"Slider Dimension\", \"zita-blocks\")}\n          </p>\n          <p>\n            <strong>{__(\"Width\", \"zita-blocks\")}</strong>\n          </p>\n          <ToggleControl\n            label={\n              sliderSetting.dimension.width\n                ? __(\"Full Width\", \"zita-blocks\")\n                : __(\"Custom Width\", \"zita-blocks\")\n            }\n            checked={sliderSetting.dimension.width}\n            onChange={(e) => {\n              this.updateGlobalSlide(e, \"dimension\", \"width\");\n            }}\n          />\n          {sliderSetting.dimension.width && (\n            <RangeControl\n              label={__(\"Width\", \"zita-blocks\")}\n              value={sliderSetting.dimension.custom_width}\n              min={200}\n              max={1400}\n              onChange={(e) =>\n                this.updateGlobalSlide(e, \"dimension\", \"custom_width\")\n              }\n            />\n          )}\n          <p>\n            <strong>{__(\"Height\", \"zita-blocks\")}</strong>\n          </p>\n          <ToggleControl\n            label={\n              sliderSetting.dimension.width\n                ? __(\"Auto\", \"zita-blocks\")\n                : __(\"Custom Height\", \"zita-blocks\")\n            }\n            checked={sliderSetting.dimension.height}\n            onChange={(e) => {\n              this.updateGlobalSlide(e, \"dimension\", \"height\");\n            }}\n          />\n          {sliderSetting.dimension.height && (\n            <RangeControl\n              label={__(\"Height\", \"zita-blocks\")}\n              value={sliderSetting.dimension.custom_height}\n              min={360}\n              max={1000}\n              onChange={(e) =>\n                this.updateGlobalSlide(e, \"dimension\", \"custom_height\")\n              }\n            />\n          )}\n          <p className=\"block-inside\">{__(\"Slider Effect\", \"zita-blocks\")}</p>\n          <div class=\"zita-switcher-button-section\">\n            <span\n              onClick={() =>\n                this.updateGlobalSlide(\"slideEffect\", \"sliderEffect\")\n              }\n              className={\n                sliderSetting.sliderEffect == \"slideEffect\" ? \"selected\" : \"\"\n              }\n            >\n              {__(\"Slide\", \"zita-blocks\")}\n            </span>\n            <span\n              onClick={() =>\n                this.updateGlobalSlide(\"fadeEffect\", \"sliderEffect\")\n              }\n              className={\n                sliderSetting.sliderEffect == \"fadeEffect\" ? \"selected\" : \"\"\n              }\n            >\n              {__(\"Fade\", \"zita-blocks\")}\n            </span>\n          </div>\n          <p className=\"block-inside\">{__(\"Trigger\", \"zita-blocks\")}</p>\n          <div class=\"zita-switcher-button-section\">\n            <span\n              onClick={() => this.setState({ trigger: \"linear\" })}\n              className={triggerActive == \"linear\" ? \"selected\" : \"\"}\n            >\n              {__(\"Linear\", \"zita-blocks\")}\n            </span>\n            <span\n              onClick={() => this.setState({ trigger: \"left\" })}\n              className={triggerActive == \"left\" ? \"selected\" : \"\"}\n            >\n              {__(\"Left Right\", \"zita-blocks\")}\n            </span>\n            <span\n              onClick={() => this.setState({ trigger: \"auto\" })}\n              className={triggerActive == \"auto\" ? \"selected\" : \"\"}\n            >\n              {__(\"Auto\", \"zita-blocks\")}\n            </span>\n          </div>\n          {triggerActive == \"linear\" && (\n            <>\n              <ToggleControl\n                label={\n                  sliderSetting.linearTrigger.enable\n                    ? __(\"Disable\", \"zita-blocks\")\n                    : __(\"Enable\", \"zita-blocks\")\n                }\n                checked={sliderSetting.linearTrigger.enable}\n                onChange={(e) =>\n                  this.updateGlobalSlide(e, \"linearTrigger\", \"enable\")\n                }\n              />\n              {sliderSetting.linearTrigger.enable && (\n                <>\n                  <RangeControl\n                    label={__(\"Size\", \"zita-blocks\")}\n                    value={sliderSetting.linearTrigger.fontSize}\n                    min={0}\n                    max={70}\n                    onChange={(e) =>\n                      this.updateGlobalSlide(e, \"linearTrigger\", \"fontSize\")\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={sliderSetting.linearTrigger.color}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateGlobalSlide(color, \"linearTrigger\", \"color\");\n                    }}\n                  />\n                  <p>\n                    <strong>{__(\"Active Color\", \"zita-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={sliderSetting.linearTrigger.activeColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateGlobalSlide(\n                        color,\n                        \"linearTrigger\",\n                        \"activeColor\"\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </>\n          )}\n          {triggerActive == \"left\" && (\n            <>\n              <ToggleControl\n                label={\n                  sliderSetting.leftRightTrigger.enable\n                    ? __(\"Disable\", \"zita-blocks\")\n                    : __(\"Enable\", \"zita-blocks\")\n                }\n                checked={sliderSetting.leftRightTrigger.enable}\n                onChange={(e) =>\n                  this.updateGlobalSlide(e, \"leftRightTrigger\", \"enable\")\n                }\n              />\n              {sliderSetting.leftRightTrigger.enable && (\n                <>\n                  <RangeControl\n                    label={__(\"Font Size\", \"zita-blocks\")}\n                    value={sliderSetting.leftRightTrigger.fontSize}\n                    min={0}\n                    max={70}\n                    onChange={(e) =>\n                      this.updateGlobalSlide(e, \"leftRightTrigger\", \"fontSize\")\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n                  </p>\n                  <ColorPalette\n                    value={sliderSetting.leftRightTrigger.color}\n                    onChange={(color) =>\n                      this.updateGlobalSlide(color, \"leftRightTrigger\", \"color\")\n                    }\n                  />\n                  <p>\n                    <strong>{__(\"Background Color\", \"zita-blocks\")}</strong>\n                  </p>\n                  <ColorPicker\n                    color={sliderSetting.leftRightTrigger.backgroundColor}\n                    onChangeComplete={(colorBg) => {\n                      let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                      this.updateGlobalSlide(\n                        color,\n                        \"leftRightTrigger\",\n                        \"backgroundColor\"\n                      );\n                    }}\n                  />\n                </>\n              )}\n            </>\n          )}\n          {triggerActive == \"auto\" && (\n            <>\n              <ToggleControl\n                label={\n                  sliderSetting.autoTrigger.enable\n                    ? __(\"Disable\", \"zita-blocks\")\n                    : __(\"Enable\", \"zita-blocks\")\n                }\n                checked={sliderSetting.autoTrigger.enable}\n                onChange={(e) =>\n                  this.updateGlobalSlide(e, \"autoTrigger\", \"enable\")\n                }\n              />\n              {sliderSetting.autoTrigger.enable && (\n                <RangeControl\n                  label={__(\"Slide Delay\", \"zita-blocks\")}\n                  value={sliderSetting.autoTrigger.delay}\n                  min={0}\n                  max={12}\n                  onChange={(e) =>\n                    this.updateGlobalSlide(e, \"autoTrigger\", \"delay\")\n                  }\n                />\n              )}\n            </>\n          )}\n        </PanelBody>\n        <PanelBody\n          title={__(\"Slide Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <p>\n            <strong>{__(\"Background image\", \"zita-blocks\")}</strong>\n          </p>\n          <MediaUpload\n            allowedType=\"image\"\n            onSelect={(newImage) =>\n              this.updateSlides(newImage.sizes.full.url, \"container\", \"bgImage\")\n            }\n            value={currentSlide.container.bgImage}\n            render={({ open }) => (\n              <div onClick={open} className=\"zita-block-image-uploader\">\n                <div>\n                  <i className=\"fas fa-plus\"></i>\n                </div>\n                <img src={currentSlide.container.bgImage} />\n              </div>\n            )}\n          />\n\n          <div className=\"flex-section\">\n            <p>{__(\"Background Size\", \"zita-blocks\")}</p>\n            <select\n              value={currentSlide.container.bgSize}\n              onChange={(e) => {\n                this.updateSlides(e.target.value, \"container\", \"bgSize\");\n              }}\n            >\n              <option value=\"auto\">{__(\"Auto\", \"zita-blocks\")}</option>\n              <option value=\"cover\">{__(\"Cover\", \"zita-blocks\")}</option>\n              <option value=\"contain\">{__(\"Contain\", \"zita-blocks\")}</option>\n            </select>\n          </div>\n          <p>\n            <strong>{__(\"Overlay Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPicker\n            color={currentSlide.container.overlayColor}\n            onChangeComplete={(colorBg) => {\n              let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n              this.updateSlides(color, \"container\", \"overlayColor\");\n            }}\n          />\n          <p>\n            <strong>{__(\"Content Alignment\", \"zita-blocks\")}</strong>\n          </p>\n          <div className=\"zita-alignment\">\n            <div>\n              <span\n                onClick={() => {\n                  this.updateSlides(\"left\", \"wrapper\", \"alignment\");\n                }}\n                className={`dashicons dashicons-editor-alignleft ${\n                  currentSlide.wrapper.alignment == \"left\" ? \"active\" : \"\"\n                }`}\n              ></span>\n            </div>\n            <div>\n              <span\n                onClick={() => {\n                  this.updateSlides(\"center\", \"wrapper\", \"alignment\");\n                }}\n                className={`dashicons dashicons-editor-aligncenter ${\n                  currentSlide.wrapper.alignment == \"center\" ? \"active\" : \"\"\n                }`}\n              ></span>\n            </div>\n            <div>\n              <span\n                onClick={() => {\n                  this.updateSlides(\"right\", \"wrapper\", \"alignment\");\n                }}\n                className={`dashicons dashicons-editor-alignright ${\n                  currentSlide.wrapper.alignment == \"right\" ? \"active\" : \"\"\n                }`}\n              ></span>\n            </div>\n          </div>\n        </PanelBody>\n        <PanelBody\n          title={__(\"Text Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <p className=\"block-inside\">{__(\"Header Setting\", \"zita-blocks\")}</p>\n          <p>\n            <strong>{__(\"Font Size\", \"zita-blocks\")}</strong>\n          </p>\n          <RangeControl\n            value={currentSlide.title.fontSize}\n            min={0}\n            max={100}\n            onChange={(e) => this.updateSlides(e, \"title\", \"fontSize\")}\n          />\n          <p>\n            <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={currentSlide.title.color}\n            onChange={(color) => this.updateSlides(color, \"title\", \"color\")}\n          />\n          <p className=\"block-inside\">\n            {__(\"Description Setting\", \"zita-blocks\")}\n          </p>\n          <p>\n            <strong>{__(\"Font Size\", \"zita-blocks\")}</strong>\n          </p>\n          <RangeControl\n            value={currentSlide.text.fontSize}\n            min={0}\n            max={100}\n            onChange={(e) => this.updateSlides(e, \"text\", \"fontSize\")}\n          />\n          <p>\n            <strong>{__(\"Color\", \"zita-blocks\")}</strong>\n          </p>\n          <ColorPalette\n            value={currentSlide.text.color}\n            onChange={(color) => this.updateSlides(color, \"text\", \"color\")}\n          />\n          <p>\n            <strong>{__(\"Text Vertical Space\", \"zita-blocks\")}</strong>\n          </p>\n          <RangeControl\n            value={currentSlide.wrapper.spacing}\n            min={0}\n            max={30}\n            onChange={(e) => this.updateSlides(e, \"wrapper\", \"spacing\")}\n          />\n        </PanelBody>\n        <PanelBody\n          title={__(\"Button Setting\", \"zita-blocks\")}\n          initialOpen={false}\n        >\n          <div className=\"zita-switcher-button-section\">\n            <span\n              className={activeTwoBtnState == \"buttoneOne\" ? \"selected\" : \"\"}\n              onClick={() => {\n                this.setState({ twoBtn: \"buttoneOne\" });\n              }}\n            >\n              {__(\"Button 1\", \"zita-blocks\")}\n            </span>\n            <span\n              className={activeTwoBtnState == \"buttoneTwo\" ? \"selected\" : \"\"}\n              onClick={() => {\n                this.setState({ twoBtn: \"buttoneTwo\" });\n              }}\n            >\n              {__(\"Button 2\", \"zita-blocks\")}\n            </span>\n          </div>\n          <ToggleControl\n            label={\n              currentSlide[activeTwoBtnState].enable\n                ? __(\"Disable\", \"zita-blocks\")\n                : __(\"Enable\", \"zita-blocks\")\n            }\n            checked={currentSlide[activeTwoBtnState].enable}\n            onChange={(e) => {\n              this.updateSlides(e, activeTwoBtnState, \"enable\");\n            }}\n          />\n          {currentSlide[activeTwoBtnState].enable && (\n            <>\n              <RangeControl\n                label={__(\"Font Size\", \"zita-blocks\")}\n                value={currentSlide[activeTwoBtnState].fontSize}\n                min={0}\n                max={70}\n                onChange={(e) =>\n                  this.updateSlides(e, activeTwoBtnState, \"fontSize\")\n                }\n              />\n              <p>{__(\"Color\", \"zita-blocks\")}</p>\n              <ColorPalette\n                value={currentSlide[activeTwoBtnState].color}\n                onChange={(color) =>\n                  this.updateSlides(color, activeTwoBtnState, \"color\")\n                }\n              />\n              <p>{__(\"Background Color\", \"zita-blocks\")}</p>\n              <ColorPicker\n                color={currentSlide[activeTwoBtnState].backgroundColor}\n                onChangeComplete={(colorBg) => {\n                  let color = `rgba(${colorBg.rgb.r},${colorBg.rgb.g},${colorBg.rgb.b},${colorBg.rgb.a})`;\n                  this.updateSlides(\n                    color,\n                    activeTwoBtnState,\n                    \"backgroundColor\"\n                  );\n                }}\n              />\n              <RangeControl\n                label={__(\"Height\", \"zita-blocks\")}\n                value={currentSlide[activeTwoBtnState].height}\n                min={0}\n                max={30}\n                onChange={(e) =>\n                  this.updateSlides(e, activeTwoBtnState, \"height\")\n                }\n              />\n              <RangeControl\n                label={__(\"Width\", \"zita-blocks\")}\n                value={currentSlide[activeTwoBtnState].width}\n                min={0}\n                max={30}\n                onChange={(e) =>\n                  this.updateSlides(e, activeTwoBtnState, \"width\")\n                }\n              />\n              <p>\n                <strong>{__(\"Border\", \"zita-blocks\")}</strong>\n              </p>\n              <ToggleControl\n                label={\n                  currentSlide[activeTwoBtnState].border ? __(\"Disable\", \"zita-blocks\") : __(\"Enable\", \"zita-blocks\")\n                }\n                checked={currentSlide[activeTwoBtnState].border}\n                onChange={(e) =>\n                  this.updateSlides(e, activeTwoBtnState, \"border\")\n                }\n              />\n              {currentSlide[activeTwoBtnState].border && (\n                <div className=\"icon-border-setting\">\n                  <RangeControl\n                    label={__(\"Border Width\", \"zita-blocks\")}\n                    value={currentSlide[activeTwoBtnState].borderWidth}\n                    min={0}\n                    max={100}\n                    onChange={(e) =>\n                      this.updateSlides(e, activeTwoBtnState, \"borderWidth\")\n                    }\n                  />\n                  <RangeControl\n                    label={__(\"Border Radius\", \"zita-blocks\")}\n                    value={currentSlide[activeTwoBtnState].borderRadius}\n                    min={0}\n                    max={50}\n                    onChange={(e) =>\n                      this.updateSlides(e, activeTwoBtnState, \"borderRadius\")\n                    }\n                  />\n                  <p>{__(\"Border Color\", \"zita-blocks\")}</p>\n                  <ColorPalette\n                    value={currentSlide[activeTwoBtnState].borderColor}\n                    onChange={(color) =>\n                      this.updateSlides(color, activeTwoBtnState, \"borderColor\")\n                    }\n                  />\n                </div>\n              )}\n            </>\n          )}\n        </PanelBody>\n      </InspectorControls>,\n      <div className=\"zita-block-slide-wrapper\">\n        <div className=\"zita-slider-bullet\">\n          <ul className=\"zita-slider-ul-bullet\">\n            {slides.map((val, index_) => {\n              return (\n                <li\n                  key={index_}\n                  className={stateIndex == index_ ? \"selected_\" : null}\n                >\n                  <span\n                    onClick={(e) => {\n                      this.setState({ selectedSlide: index_ });\n                    }}\n                  ></span>\n                </li>\n              );\n            })}\n            {slides.length < 8 && (\n              <li className=\"add-item\">\n                <span\n                  onClick={() => {\n                    this.addSlide();\n                  }}\n                >\n                  <i className=\"fas fa-plus\"></i>\n                </span>\n              </li>\n            )}\n          </ul>\n        </div>\n        <div className=\"zita-slider-container\">\n          {/* slider trigger */}\n          {sliderSetting.linearTrigger.enable && (\n            <ul className=\"zita-slider-bullet-trigger\">\n              {slides.map((val, index_) => {\n                let trigStyle = {\n                  height: sliderSetting.linearTrigger.fontSize + \"px\",\n                  width: sliderSetting.linearTrigger.fontSize + \"px\",\n                };\n                trigStyle =\n                  index_ != stateIndex\n                    ? {\n                        ...trigStyle,\n                        ...{\n                          backgroundColor: sliderSetting.linearTrigger.color,\n                        },\n                      }\n                    : {\n                        ...trigStyle,\n                        ...{\n                          backgroundColor:\n                            sliderSetting.linearTrigger.activeColor,\n                        },\n                      };\n                return (\n                  <li className={`${index_ == stateIndex ? \"selected_\" : \"\"}`}>\n                    <span style={trigStyle}></span>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {/* next prev btn */}\n          {sliderSetting.leftRightTrigger.enable && (\n            <>\n              <div className=\"zita-slider-bullet-next-prev next\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-right\"></i>\n                </span>\n              </div>\n              <div className=\"zita-slider-bullet-next-prev prev\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-left\"></i>\n                </span>\n              </div>\n            </>\n          )}\n          {/* next prev btn */}\n          {/* slider trigger */}\n          {slides.length > 1 && (\n            <span\n              className=\"zita-remove-slide\"\n              onClick={(e) => {\n                this.removeSlide();\n              }}\n            >\n              <i className=\"fas fa-trash-alt\"></i>\n            </span>\n          )}\n          <ul className=\"zita-slider-ul-slides\" style={SlideulStyle}>\n            {slides.map((val, index_) => {\n              return (\n                <li\n                  onClick={(e) => {\n                    this.setState({ selectedSlide: index_ });\n                  }}\n                  key={index_}\n                  className={stateIndex == index_ ? \"selected_\" : null}\n                >\n                  <div className=\"zita-slider-wrapper\">\n                    <div className=\"zita-slider-container\">\n                      <div className=\"zita-slider-content-wrapper\">\n                        <div\n                          className=\"zita-slider-image-container\"\n                          style={{\n                            backgroundSize: val.container.bgSize,\n                            backgroundImage:\n                              \"url(\" + val.container.bgImage + \")\",\n                          }}\n                        ></div>\n                        <div\n                          className={`zita-slider-text ${val.wrapper.alignment}`}\n                          style={{\n                            backgroundColor: val.container.overlayColor,\n                          }}\n                        >\n                          <div\n                            style={{\n                              marginTop: val.wrapper.spacing + \"px\",\n                              marginBottom: val.wrapper.spacing + \"px\",\n                            }}\n                          >\n                            <RichText\n                              key=\"editable\"\n                              tagName=\"h1\"\n                              placeholder={__(\"Service Title\", \"zita-blocks\")}\n                              value={val.title.text}\n                              onChange={(e) =>\n                                this.updateSlides(e, \"title\", \"text\")\n                              }\n                              style={{\n                                fontSize: val.title.fontSize + \"px\",\n                                color: val.title.color,\n                              }}\n                            />\n                            <RichText\n                              key=\"editable\"\n                              tagName=\"h2\"\n                              placeholder={__(\"Service Title\", \"zita-blocks\")}\n                              value={val.text.text}\n                              onChange={(e) =>\n                                this.updateSlides(e, \"text\", \"text\")\n                              }\n                              style={{\n                                fontSize: val.text.fontSize + \"px\",\n                                color: val.text.color,\n                              }}\n                            />\n                            <div className=\"button-container\">\n                              {val.buttoneOne.enable && (\n                                <>\n                                  <RichText\n                                    key=\"editable\"\n                                    tagName=\"a\"\n                                    placeholder={__(\"Button One\", \"zita-blocks\")}\n                                    value={val.buttoneOne.text}\n                                    onChange={(e) =>\n                                      this.updateSlides(e, \"buttoneOne\", \"text\")\n                                    }\n                                    style={buttonOneStyle}\n                                  />\n                                </>\n                              )}\n                              {val.buttoneTwo.enable && (\n                                <RichText\n                                  key=\"editable\"\n                                  tagName=\"a\"\n                                  placeholder={__(\"Button Two\", \"zita-blocks\")}\n                                  value={val.buttoneTwo.text}\n                                  onChange={(e) =>\n                                    this.updateSlides(e, \"buttoneTwo\", \"text\")\n                                  }\n                                  style={buttonTwoStyle}\n                                />\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>,\n    ];\n  }\n}\nexport default Edit;\n","// extracted by mini-css-extract-plugin","import \"./editor.scss\";\nimport { registerBlockType } from \"@wordpress/blocks\";\nimport Edit from \"./edit\";\nlet bgImageWrapper = plugin_url.url + \"assets/img/image2.jpg\";\nimport { __ } from \"@wordpress/i18n\";\nimport { RichText } from \"@wordpress/block-editor\";\nconst attrSave = {\n  sliderSetting: {\n    type: \"array\",\n    default: [\n      {\n        dimension: {\n          width: false,\n          custom_width: 580,\n          height: false,\n          custom_height: 360,\n        },\n        sliderEffect: \"fadeEffect\",\n        linearTrigger: {\n          enable: true,\n          fontSize: 20,\n          color: \"rgba(231,192,192,1)\",\n          activeColor: \"rgba(68,222,68,1)\",\n        },\n        leftRightTrigger: {\n          enable: true,\n          fontSize: 20,\n          color: \"rgba(231,192,192,1)\",\n          backgroundColor: \"rgb(128, 128, 128)\",\n        },\n        autoTrigger: {\n          enable: true,\n          delay: 4,\n        },\n      },\n    ],\n  },\n  slides: {\n    type: \"array\",\n    default: [\n      {\n        container: {\n          bgImage: bgImageWrapper,\n          overlayColor: \"\",\n          bgSize: \"cover\",\n        },\n        wrapper: {\n          bgcolor: \"\",\n          border: \"\",\n          alignment: \"left\",\n          spacing: 2,\n        },\n        title: {\n          text: __(\"This Is Title text\", \"zita-blocks\"),\n          fontSize: 17,\n          color: \"red\",\n        },\n        text: {\n          text: __(\"Add Description\", \"zita-blocks\"),\n          fontSize: 17,\n          color: \"red\",\n        },\n        buttoneOne: {\n          enable: true,\n          text: __(\"Button One\", \"zita-blocks\"),\n          link: \"#\",\n          target: false,\n          fontSize: \"\",\n          color: \"\",\n          backgroundColor: \"\",\n          height: \"\",\n          width: \"\",\n          border: false,\n          borderColor: \"\",\n          borderWidth: \"\",\n          borderRadius: \"\",\n        },\n        buttoneTwo: {\n          enable: true,\n          text: __(\"Button Two\", \"zita-blocks\"),\n          link: \"#\",\n          target: false,\n          fontSize: \"\",\n          color: \"\",\n          backgroundColor: \"\",\n          height: \"\",\n          width: \"\",\n          border: false,\n          borderColor: \"\",\n          borderWidth: \"\",\n          borderRadius: \"\",\n        },\n      },\n      {\n        container: {\n          bgImage: bgImageWrapper,\n          overlayColor: \"\",\n          bgSize: \"cover\",\n        },\n        wrapper: {\n          bgcolor: \"\",\n          border: \"\",\n          alignment: \"left\",\n          spacing: 2,\n        },\n        title: {\n          text: __(\"This Is Title text\", \"zita-blocks\"),\n          fontSize: 17,\n          color: \"red\",\n        },\n        text: {\n          text: __(\"Add Description\", \"zita-blocks\"),\n          fontSize: 17,\n          color: \"red\",\n        },\n        buttoneOne: {\n          enable: true,\n          text: __(\"Button One\", \"zita-blocks\"),\n          link: \"#\",\n          target: false,\n          fontSize: \"\",\n          color: \"\",\n          backgroundColor: \"\",\n          height: \"\",\n          width: \"\",\n          border: false,\n          borderColor: \"\",\n          borderWidth: \"\",\n          borderRadius: \"\",\n        },\n        buttoneTwo: {\n          enable: true,\n          text: __(\"Button Two\", \"zita-blocks\"),\n          link: \"#\",\n          target: false,\n          fontSize: \"\",\n          color: \"\",\n          backgroundColor: \"\",\n          height: \"\",\n          width: \"\",\n          border: false,\n          borderColor: \"\",\n          borderWidth: \"\",\n          borderRadius: \"\",\n        },\n      },\n      {\n        container: {\n          bgImage: bgImageWrapper,\n          overlayColor: \"\",\n          bgSize: \"cover\",\n        },\n        wrapper: {\n          bgcolor: \"\",\n          border: \"\",\n          alignment: \"left\",\n          spacing: 2,\n        },\n        title: {\n          text: __(\"This Is Title text\", \"zita-blocks\"),\n          fontSize: 17,\n          color: \"red\",\n        },\n        text: {\n          text: __(\"Add Description\", \"zita-blocks\"),\n          fontSize: 17,\n          color: \"red\",\n        },\n        buttoneOne: {\n          enable: true,\n          text: __(\"Button One\", \"zita-blocks\"),\n          link: \"#\",\n          target: false,\n          fontSize: \"\",\n          color: \"\",\n          backgroundColor: \"\",\n          height: \"\",\n          width: \"\",\n          border: false,\n          borderColor: \"\",\n          borderWidth: \"\",\n          borderRadius: \"\",\n        },\n        buttoneTwo: {\n          enable: true,\n          text: __(\"Button Two\", \"zita-blocks\"),\n          link: \"#\",\n          target: false,\n          fontSize: \"\",\n          color: \"\",\n          backgroundColor: \"\",\n          height: \"\",\n          width: \"\",\n          border: false,\n          borderColor: \"\",\n          borderWidth: \"\",\n          borderRadius: \"\",\n        },\n      },\n    ],\n  },\n};\nlet elementLiSlide = (val, index_, clone = false) => {\n  let buttonOneStyle = {};\n  if (val.buttoneOne.fontSize)\n    buttonOneStyle.fontSize = val.buttoneOne.fontSize;\n  if (val.buttoneOne.color) buttonOneStyle.color = val.buttoneOne.color;\n  if (val.buttoneOne.backgroundColor)\n    buttonOneStyle.backgroundColor = val.buttoneOne.backgroundColor;\n  if (val.buttoneOne.height) {\n    buttonOneStyle.paddingBottom = val.buttoneOne.height;\n    buttonOneStyle.paddingTop = val.buttoneOne.height;\n  }\n  if (val.buttoneOne.width) {\n    buttonOneStyle.paddingLeft = val.buttoneOne.width;\n    buttonOneStyle.paddingRight = val.buttoneOne.width;\n  }\n\n  buttonOneStyle = val.buttoneOne.border\n    ? {\n        ...{\n          borderColor: val.buttoneOne.borderColor,\n          borderWidth: val.buttoneOne.borderWidth,\n          borderRadius: val.buttoneOne.borderRadius,\n          borderStyle: \"solid\",\n        },\n        ...buttonOneStyle,\n      }\n    : buttonOneStyle;\n  let buttonTwoStyle = {};\n  if (val.buttoneTwo.fontSize)\n    buttonTwoStyle.fontSize = val.buttoneTwo.fontSize;\n  if (val.buttoneTwo.color) buttonTwoStyle.color = val.buttoneTwo.color;\n  if (val.buttoneTwo.backgroundColor)\n    buttonTwoStyle.backgroundColor = val.buttoneTwo.backgroundColor;\n  if (val.buttoneTwo.height) {\n    buttonTwoStyle.paddingBottom = val.buttoneTwo.height;\n    buttonTwoStyle.paddingTop = val.buttoneTwo.height;\n  }\n  if (val.buttoneTwo.width) {\n    buttonTwoStyle.paddingLeft = val.buttoneTwo.width;\n    buttonTwoStyle.paddingRight = val.buttoneTwo.width;\n  }\n\n  buttonTwoStyle = val.buttoneTwo.border\n    ? {\n        ...{\n          borderColor: val.buttoneTwo.borderColor,\n          borderWidth: val.buttoneTwo.borderWidth,\n          borderRadius: val.buttoneTwo.borderRadius,\n          borderStyle: \"solid\",\n        },\n        ...buttonTwoStyle,\n      }\n    : buttonTwoStyle;\n\n  return (\n    <li\n      key={index_}\n      className={`slides ${index_ == 0 ? \"selected_\" : \"\"} ${\n        clone ? clone : \"\"\n      }`}\n    >\n      <div className=\"zita-slider-wrapper\">\n        <div className=\"zita-slider-container\">\n          <div className=\"zita-slider-content-wrapper\">\n            <div\n              className=\"zita-slider-image-container\"\n              style={{\n                backgroundSize: \"cover\",\n                backgroundImage: \"url(\" + val.container.bgImage + \")\",\n              }}\n            ></div>\n            <div\n              className={`zita-slider-text ${val.wrapper.alignment}`}\n              style={{\n                backgroundColor: val.container.overlayColor,\n              }}\n            >\n              <div\n                style={\n                  val.wrapper.spacing && {\n                    marginTop: val.wrapper.spacing + \"px\",\n                    marginBottom: val.wrapper.spacing + \"px\",\n                  }\n                }\n              >\n                <RichText.Content\n                  tagName=\"h1\"\n                  value={__(val.title.text, \"zita-blocks\")}\n                  style={{\n                    fontSize: val.title.fontSize + \"px\",\n                    color: val.title.color,\n                  }}\n                />\n                <RichText.Content\n                  tagName=\"h2\"\n                  value={__(val.text.text, \"zita-blocks\")}\n                  style={{\n                    fontSize: val.text.fontSize + \"px\",\n                    color: val.text.color,\n                  }}\n                />\n\n                <div className=\"button-container\">\n                  {val.buttoneOne.enable && (\n                    <>\n                      <RichText.Content\n                        tagName=\"a\"\n                        placeholder={__(\"Button One\", \"zita-blocks\")}\n                        value={val.buttoneOne.text}\n                        style={buttonOneStyle}\n                      />\n                    </>\n                  )}\n                  {val.buttoneTwo.enable && (\n                    <RichText.Content\n                      tagName=\"a\"\n                      placeholder={__(\"Button One\", \"zita-blocks\")}\n                      value={val.buttoneTwo.text}\n                      style={buttonTwoStyle}\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </li>\n  );\n};\nregisterBlockType(\"zita-blocks/slide\", {\n  title: __(\"Slider\", \"zita-blocks\"),\n  icon: \"editor-code\",\n  category: \"zita-category\",\n  getEditWrapperProps(attributes) {\n    let { sliderSetting } = attributes;\n    let sliderWidth = sliderSetting[0].dimension;\n    let attr_ = { \"data-align\": \"full\" };\n    if (sliderWidth.width && sliderWidth.custom_width) {\n      attr_ = {\n        ...attr_,\n        ...{\n          style: { maxWidth: sliderWidth.custom_width + \"px\" },\n        },\n      };\n    }\n    return attr_;\n  },\n  keywords: [\"slider\", \"slider section\"],\n  attributes: attrSave,\n  example: () => {},\n  edit: Edit,\n  save: (props) => {\n    let { slides, sliderSetting } = props.attributes;\n    sliderSetting = sliderSetting[0];\n    let leftRightStyle = {\n      color: sliderSetting.leftRightTrigger.color,\n      backgroundColor: sliderSetting.leftRightTrigger.backgroundColor,\n      fontSize: sliderSetting.leftRightTrigger.fontSize,\n    };\n    let trigStyle = `height: ${sliderSetting.linearTrigger.fontSize}px;width:${sliderSetting.linearTrigger.fontSize}px;background-color: ${sliderSetting.linearTrigger.color};`;\n    let trigStyleObj = {\n      height: sliderSetting.linearTrigger.fontSize + \"px\",\n      width: sliderSetting.linearTrigger.fontSize + \"px\",\n      backgroundColor: sliderSetting.linearTrigger.color,\n    };\n\n    let sliderSettingJson = {};\n    if (sliderSetting.dimension.width)\n      sliderSettingJson = {\n        ...sliderSettingJson,\n        ...{ width: sliderSetting.dimension.custom_width },\n      };\n    if (sliderSetting.dimension.height)\n      sliderSettingJson = {\n        ...sliderSettingJson,\n        ...{ height: sliderSetting.dimension.custom_height },\n      };\n    sliderSettingJson = JSON.stringify(sliderSettingJson);\n    return (\n      <div className=\"zita-block-slide-wrapper\">\n        <div\n          className=\"zita-slider-container\"\n          sliderDelay={\n            sliderSetting.autoTrigger.delay > 0 &&\n            sliderSetting.autoTrigger.enable\n              ? sliderSetting.autoTrigger.delay\n              : 0\n          }\n        >\n          {sliderSetting.linearTrigger.enable && (\n            <ul\n              className=\"zita-slider-bullet-trigger\"\n              active-color={sliderSetting.linearTrigger.activeColor}\n              childStyle={trigStyle}\n            >\n              {slides.map((val, index_) => {\n                return (\n                  <li className={`${index_ == 0 ? \"selected_\" : \"\"}`}>\n                    <span style={trigStyleObj}></span>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {/* next prev btn */}\n          {sliderSetting.leftRightTrigger.enable && (\n            <>\n              <div className=\"zita-slider-bullet-next-prev next\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-right\"></i>\n                </span>\n              </div>\n              <div className=\"zita-slider-bullet-next-prev prev\">\n                <span style={leftRightStyle}>\n                  <i class=\"fas fa-arrow-left\"></i>\n                </span>\n              </div>\n            </>\n          )}\n          {/* slider main slides */}\n          <ul\n            className={`zita-slider-ul-slides ${sliderSetting.sliderEffect}`}\n            sliderSetting={sliderSettingJson}\n          >\n            {/* {sliderSetting.sliderEffect == \"slideEffect\" &&\n              elementLiSlide(\n                slides[slides.length - 1],\n                slides.length - 1,\n                \"clone_ last_\"\n              )} */}\n            {slides.map((val, index_) => {\n              return elementLiSlide(val, index_);\n            })}\n            {/* {sliderSetting.sliderEffect == \"slideEffect\" &&\n              elementLiSlide(slides[0], 0, \"clone_ first_\")} */}\n          </ul>\n        </div>\n      </div>\n    );\n  },\n});\n","import \"./blocks/icon-block\";\nimport \"./blocks/service-section\";\nimport \"./blocks/pricing-table\";\nimport \"./blocks/progress-bar\";\nimport \"./blocks/progress-bar-pie\";\nimport \"./blocks/zita-block-slider\";","module.exports = wp[\"blockEditor\"];","module.exports = wp[\"blocks\"];","module.exports = wp[\"components\"];","module.exports = wp[\"element\"];","module.exports = wp[\"i18n\"];"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAyNA;;;;;;;;;;;;ACzNA;AAAA;AA08CA;;;;;;;;;;;AC18CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAOA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAvFA;AA4FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AA7BA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;AAAA;AAAA;AAAA;AACA;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAFA;AASA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAmBA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAIA;AAOA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAhBA;AAwBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAUA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAFA;AAKA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAZA;AAmBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AAAA;AAKA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAOA;AAOA;AACA;AAFA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAUA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAYA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AANA;AAUA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAUA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AANA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAUA;AAEA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAUA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAHA;AAkBA;AAxnBA;;;;;;;;;;;ACpBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;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CA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAzGA;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkCA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAIA;AACA;AACA;AAHA;AACA;AAjEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAwEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtFA;AAAA;AAAA;AAAA;AACA;AAuFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAFA;AAQA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AANA;AAiBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AAAA;AAMA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAmBA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAIA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAUA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAAA;AACA;AAAA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAcA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AAAA;AAKA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAOA;AAOA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AAAA;AAKA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAOA;AAOA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAAA;AACA;AAAA;AADA;AADA;AASA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AAUA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AANA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AANA;AAgBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA+BA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAIA;AACA;AACA;AAHA;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AALA;AAUA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAYA;AA1nBA;;;;;;;;;;;;ACpIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAUA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAOA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAOA;AAAA;AACA;AAAA;AAMA;AAAA;AAEA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAIA;AAvFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAMA;AAMA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AASA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AArCA;AAqDA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAlEA;AAgFA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AArFA;AAsFA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA7FA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AA0DA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AADA;AAGA;;;AAmBA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAGA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAGA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAcA;AAKA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAUA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AAAA;AAGA;AAJA;AAWA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAUA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAaA;AACA;AACA;AACA;AAAA;AACA;AALA;AAWA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAkBA;AAKA;AACA;AAAA;AAAA;AAPA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAaA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAkBA;AAKA;AACA;AAAA;AAAA;AAPA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAcA;AACA;AAFA;AAQA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AALA;AANA;AAgBA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AACA;AALA;AAUA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AAJA;AAYA;AACA;AAFA;AAIA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAUA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAUA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAQA;AACA;AAFA;AAIA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AASA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAUA;AAKA;AACA;AACA;AACA;AATA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AACA;AACA;AAAA;AAKA;AATA;AAYA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAaA;AAGA;AACA;AAAA;AAAA;AALA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AAAA;AAFA;AAYA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AACA;AAHA;AAOA;AAEA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAMA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AAKA;AADA;AAOA;AADA;AAKA;AACA;AAAA;AACA;AAAA;AAGA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AASA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AASA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AARA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AARA;AAaA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AARA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AARA;AAmBA;AAKA;;;;AAr0BA;AACA;AAs0BA;;;;;;;;;;;ACt1BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AApBA;AAHA;AA8BA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AArCA;AAsDA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AArCA;AAsDA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AArCA;AA7GA;AA/BA;AACA;AAmMA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAUA;AAEA;AACA;AAFA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AADA;AAFA;AAOA;AAEA;AACA;AAFA;AAFA;AASA;AACA;AACA;AACA;AACA;AAFA;AAHA;AASA;AACA;AACA;AACA;AACA;AAFA;AAHA;AASA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAUA;AACA;AACA;AACA;AAJA;AAeA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAGA;AAAA;AAEA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAWA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AAAA;AAGA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AACA;AAFA;AAWA;AACA;AAOA;AA9GA;;;;;;;;;;;;AC5UA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}